//   Ordt 190617.01 autogenerated file 
//   Input: tlx_ctrl.rdl
//   Parms: ./ordt/params.txt
//   Date: Thu May 07 11:38:21 PDT 2020
//

//
//---------- module AhaTlxCtrlAddrMap_jrdl_logic
//
module AhaTlxCtrlAddrMap_jrdl_logic
(
  clk,
  reset,
  d2l_ID_REG_w,
  d2l_ID_REG_w_enable,
  d2l_ID_REG_we,
  d2l_ID_REG_re,
  d2l_LANE_ENABLE_REG_w,
  d2l_LANE_ENABLE_REG_w_enable,
  d2l_LANE_ENABLE_REG_we,
  d2l_LANE_ENABLE_REG_re,
  d2l_LANE_IE_REG_w,
  d2l_LANE_IE_REG_w_enable,
  d2l_LANE_IE_REG_we,
  d2l_LANE_IE_REG_re,
  d2l_LANE_START_REG_w,
  d2l_LANE_START_REG_w_enable,
  d2l_LANE_START_REG_we,
  d2l_LANE_START_REG_re,
  d2l_LANE_CLEAR_REG_w,
  d2l_LANE_CLEAR_REG_w_enable,
  d2l_LANE_CLEAR_REG_we,
  d2l_LANE_CLEAR_REG_re,
  d2l_LANE_INT_STATUS_REG_w,
  d2l_LANE_INT_STATUS_REG_w_enable,
  d2l_LANE_INT_STATUS_REG_we,
  d2l_LANE_INT_STATUS_REG_re,
  d2l_LANE_STATUS_REG_w,
  d2l_LANE_STATUS_REG_w_enable,
  d2l_LANE_STATUS_REG_we,
  d2l_LANE_STATUS_REG_re,
  d2l_LANE0_SEQUENCE_REG_w,
  d2l_LANE0_SEQUENCE_REG_w_enable,
  d2l_LANE0_SEQUENCE_REG_we,
  d2l_LANE0_SEQUENCE_REG_re,
  d2l_LANE1_SEQUENCE_REG_w,
  d2l_LANE1_SEQUENCE_REG_w_enable,
  d2l_LANE1_SEQUENCE_REG_we,
  d2l_LANE1_SEQUENCE_REG_re,
  d2l_LANE2_SEQUENCE_REG_w,
  d2l_LANE2_SEQUENCE_REG_w_enable,
  d2l_LANE2_SEQUENCE_REG_we,
  d2l_LANE2_SEQUENCE_REG_re,
  d2l_LANE3_SEQUENCE_REG_w,
  d2l_LANE3_SEQUENCE_REG_w_enable,
  d2l_LANE3_SEQUENCE_REG_we,
  d2l_LANE3_SEQUENCE_REG_re,
  d2l_LANE4_SEQUENCE_REG_w,
  d2l_LANE4_SEQUENCE_REG_w_enable,
  d2l_LANE4_SEQUENCE_REG_we,
  d2l_LANE4_SEQUENCE_REG_re,
  d2l_LANE5_SEQUENCE_REG_w,
  d2l_LANE5_SEQUENCE_REG_w_enable,
  d2l_LANE5_SEQUENCE_REG_we,
  d2l_LANE5_SEQUENCE_REG_re,
  d2l_LANE6_SEQUENCE_REG_w,
  d2l_LANE6_SEQUENCE_REG_w_enable,
  d2l_LANE6_SEQUENCE_REG_we,
  d2l_LANE6_SEQUENCE_REG_re,
  d2l_LANE7_SEQUENCE_REG_w,
  d2l_LANE7_SEQUENCE_REG_w_enable,
  d2l_LANE7_SEQUENCE_REG_we,
  d2l_LANE7_SEQUENCE_REG_re,
  d2l_LANE8_SEQUENCE_REG_w,
  d2l_LANE8_SEQUENCE_REG_w_enable,
  d2l_LANE8_SEQUENCE_REG_we,
  d2l_LANE8_SEQUENCE_REG_re,
  d2l_LANE9_SEQUENCE_REG_w,
  d2l_LANE9_SEQUENCE_REG_w_enable,
  d2l_LANE9_SEQUENCE_REG_we,
  d2l_LANE9_SEQUENCE_REG_re,
  d2l_LANE0_LENGTH_REG_w,
  d2l_LANE0_LENGTH_REG_w_enable,
  d2l_LANE0_LENGTH_REG_we,
  d2l_LANE0_LENGTH_REG_re,
  d2l_LANE1_LENGTH_REG_w,
  d2l_LANE1_LENGTH_REG_w_enable,
  d2l_LANE1_LENGTH_REG_we,
  d2l_LANE1_LENGTH_REG_re,
  d2l_LANE2_LENGTH_REG_w,
  d2l_LANE2_LENGTH_REG_w_enable,
  d2l_LANE2_LENGTH_REG_we,
  d2l_LANE2_LENGTH_REG_re,
  d2l_LANE3_LENGTH_REG_w,
  d2l_LANE3_LENGTH_REG_w_enable,
  d2l_LANE3_LENGTH_REG_we,
  d2l_LANE3_LENGTH_REG_re,
  d2l_LANE4_LENGTH_REG_w,
  d2l_LANE4_LENGTH_REG_w_enable,
  d2l_LANE4_LENGTH_REG_we,
  d2l_LANE4_LENGTH_REG_re,
  d2l_LANE5_LENGTH_REG_w,
  d2l_LANE5_LENGTH_REG_w_enable,
  d2l_LANE5_LENGTH_REG_we,
  d2l_LANE5_LENGTH_REG_re,
  d2l_LANE6_LENGTH_REG_w,
  d2l_LANE6_LENGTH_REG_w_enable,
  d2l_LANE6_LENGTH_REG_we,
  d2l_LANE6_LENGTH_REG_re,
  d2l_LANE7_LENGTH_REG_w,
  d2l_LANE7_LENGTH_REG_w_enable,
  d2l_LANE7_LENGTH_REG_we,
  d2l_LANE7_LENGTH_REG_re,
  d2l_LANE8_LENGTH_REG_w,
  d2l_LANE8_LENGTH_REG_w_enable,
  d2l_LANE8_LENGTH_REG_we,
  d2l_LANE8_LENGTH_REG_re,
  d2l_LANE9_LENGTH_REG_w,
  d2l_LANE9_LENGTH_REG_w_enable,
  d2l_LANE9_LENGTH_REG_we,
  d2l_LANE9_LENGTH_REG_re,
  d2l_LANE0_MATCH_COUNT_REG_w,
  d2l_LANE0_MATCH_COUNT_REG_w_enable,
  d2l_LANE0_MATCH_COUNT_REG_we,
  d2l_LANE0_MATCH_COUNT_REG_re,
  d2l_LANE1_MATCH_COUNT_REG_w,
  d2l_LANE1_MATCH_COUNT_REG_w_enable,
  d2l_LANE1_MATCH_COUNT_REG_we,
  d2l_LANE1_MATCH_COUNT_REG_re,
  d2l_LANE2_MATCH_COUNT_REG_w,
  d2l_LANE2_MATCH_COUNT_REG_w_enable,
  d2l_LANE2_MATCH_COUNT_REG_we,
  d2l_LANE2_MATCH_COUNT_REG_re,
  d2l_LANE3_MATCH_COUNT_REG_w,
  d2l_LANE3_MATCH_COUNT_REG_w_enable,
  d2l_LANE3_MATCH_COUNT_REG_we,
  d2l_LANE3_MATCH_COUNT_REG_re,
  d2l_LANE4_MATCH_COUNT_REG_w,
  d2l_LANE4_MATCH_COUNT_REG_w_enable,
  d2l_LANE4_MATCH_COUNT_REG_we,
  d2l_LANE4_MATCH_COUNT_REG_re,
  d2l_LANE5_MATCH_COUNT_REG_w,
  d2l_LANE5_MATCH_COUNT_REG_w_enable,
  d2l_LANE5_MATCH_COUNT_REG_we,
  d2l_LANE5_MATCH_COUNT_REG_re,
  d2l_LANE6_MATCH_COUNT_REG_w,
  d2l_LANE6_MATCH_COUNT_REG_w_enable,
  d2l_LANE6_MATCH_COUNT_REG_we,
  d2l_LANE6_MATCH_COUNT_REG_re,
  d2l_LANE7_MATCH_COUNT_REG_w,
  d2l_LANE7_MATCH_COUNT_REG_w_enable,
  d2l_LANE7_MATCH_COUNT_REG_we,
  d2l_LANE7_MATCH_COUNT_REG_re,
  d2l_LANE8_MATCH_COUNT_REG_w,
  d2l_LANE8_MATCH_COUNT_REG_w_enable,
  d2l_LANE8_MATCH_COUNT_REG_we,
  d2l_LANE8_MATCH_COUNT_REG_re,
  d2l_LANE9_MATCH_COUNT_REG_w,
  d2l_LANE9_MATCH_COUNT_REG_w_enable,
  d2l_LANE9_MATCH_COUNT_REG_we,
  d2l_LANE9_MATCH_COUNT_REG_re,
  h2l_LANE_INT_STATUS_REG_LANE0_w,
  h2l_LANE_INT_STATUS_REG_LANE1_w,
  h2l_LANE_INT_STATUS_REG_LANE2_w,
  h2l_LANE_INT_STATUS_REG_LANE3_w,
  h2l_LANE_INT_STATUS_REG_LANE4_w,
  h2l_LANE_INT_STATUS_REG_LANE5_w,
  h2l_LANE_INT_STATUS_REG_LANE6_w,
  h2l_LANE_INT_STATUS_REG_LANE7_w,
  h2l_LANE_INT_STATUS_REG_LANE8_w,
  h2l_LANE_INT_STATUS_REG_LANE9_w,
  h2l_LANE_STATUS_REG_LANE0_w,
  h2l_LANE_STATUS_REG_LANE1_w,
  h2l_LANE_STATUS_REG_LANE2_w,
  h2l_LANE_STATUS_REG_LANE3_w,
  h2l_LANE_STATUS_REG_LANE4_w,
  h2l_LANE_STATUS_REG_LANE5_w,
  h2l_LANE_STATUS_REG_LANE6_w,
  h2l_LANE_STATUS_REG_LANE7_w,
  h2l_LANE_STATUS_REG_LANE8_w,
  h2l_LANE_STATUS_REG_LANE9_w,
  h2l_LANE0_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE1_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE2_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE3_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE4_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE5_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE6_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE7_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE8_MATCH_COUNT_REG_MATCH_COUNT_w,
  h2l_LANE9_MATCH_COUNT_REG_MATCH_COUNT_w,

  l2d_ID_REG_r,
  l2d_LANE_ENABLE_REG_r,
  l2d_LANE_IE_REG_r,
  l2d_LANE_START_REG_r,
  l2d_LANE_CLEAR_REG_r,
  l2d_LANE_INT_STATUS_REG_r,
  l2d_LANE_STATUS_REG_r,
  l2d_LANE0_SEQUENCE_REG_r,
  l2d_LANE1_SEQUENCE_REG_r,
  l2d_LANE2_SEQUENCE_REG_r,
  l2d_LANE3_SEQUENCE_REG_r,
  l2d_LANE4_SEQUENCE_REG_r,
  l2d_LANE5_SEQUENCE_REG_r,
  l2d_LANE6_SEQUENCE_REG_r,
  l2d_LANE7_SEQUENCE_REG_r,
  l2d_LANE8_SEQUENCE_REG_r,
  l2d_LANE9_SEQUENCE_REG_r,
  l2d_LANE0_LENGTH_REG_r,
  l2d_LANE1_LENGTH_REG_r,
  l2d_LANE2_LENGTH_REG_r,
  l2d_LANE3_LENGTH_REG_r,
  l2d_LANE4_LENGTH_REG_r,
  l2d_LANE5_LENGTH_REG_r,
  l2d_LANE6_LENGTH_REG_r,
  l2d_LANE7_LENGTH_REG_r,
  l2d_LANE8_LENGTH_REG_r,
  l2d_LANE9_LENGTH_REG_r,
  l2d_LANE0_MATCH_COUNT_REG_r,
  l2d_LANE1_MATCH_COUNT_REG_r,
  l2d_LANE2_MATCH_COUNT_REG_r,
  l2d_LANE3_MATCH_COUNT_REG_r,
  l2d_LANE4_MATCH_COUNT_REG_r,
  l2d_LANE5_MATCH_COUNT_REG_r,
  l2d_LANE6_MATCH_COUNT_REG_r,
  l2d_LANE7_MATCH_COUNT_REG_r,
  l2d_LANE8_MATCH_COUNT_REG_r,
  l2d_LANE9_MATCH_COUNT_REG_r,
  l2h_LANE_ENABLE_REG_LANE0_r,
  l2h_LANE_ENABLE_REG_LANE1_r,
  l2h_LANE_ENABLE_REG_LANE2_r,
  l2h_LANE_ENABLE_REG_LANE3_r,
  l2h_LANE_ENABLE_REG_LANE4_r,
  l2h_LANE_ENABLE_REG_LANE5_r,
  l2h_LANE_ENABLE_REG_LANE6_r,
  l2h_LANE_ENABLE_REG_LANE7_r,
  l2h_LANE_ENABLE_REG_LANE8_r,
  l2h_LANE_ENABLE_REG_LANE9_r,
  l2h_LANE_IE_REG_LANE0_r,
  l2h_LANE_IE_REG_LANE1_r,
  l2h_LANE_IE_REG_LANE2_r,
  l2h_LANE_IE_REG_LANE3_r,
  l2h_LANE_IE_REG_LANE4_r,
  l2h_LANE_IE_REG_LANE5_r,
  l2h_LANE_IE_REG_LANE6_r,
  l2h_LANE_IE_REG_LANE7_r,
  l2h_LANE_IE_REG_LANE8_r,
  l2h_LANE_IE_REG_LANE9_r,
  l2h_LANE_START_REG_LANE0_r,
  l2h_LANE_START_REG_LANE1_r,
  l2h_LANE_START_REG_LANE2_r,
  l2h_LANE_START_REG_LANE3_r,
  l2h_LANE_START_REG_LANE4_r,
  l2h_LANE_START_REG_LANE5_r,
  l2h_LANE_START_REG_LANE6_r,
  l2h_LANE_START_REG_LANE7_r,
  l2h_LANE_START_REG_LANE8_r,
  l2h_LANE_START_REG_LANE9_r,
  l2h_LANE_CLEAR_REG_LANE0_r,
  l2h_LANE_CLEAR_REG_LANE1_r,
  l2h_LANE_CLEAR_REG_LANE2_r,
  l2h_LANE_CLEAR_REG_LANE3_r,
  l2h_LANE_CLEAR_REG_LANE4_r,
  l2h_LANE_CLEAR_REG_LANE5_r,
  l2h_LANE_CLEAR_REG_LANE6_r,
  l2h_LANE_CLEAR_REG_LANE7_r,
  l2h_LANE_CLEAR_REG_LANE8_r,
  l2h_LANE_CLEAR_REG_LANE9_r,
  l2h_LANE0_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE1_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE2_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE3_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE4_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE5_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE6_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE7_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE8_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE9_SEQUENCE_REG_SEQUENCE_r,
  l2h_LANE0_LENGTH_REG_LENGTH_r,
  l2h_LANE1_LENGTH_REG_LENGTH_r,
  l2h_LANE2_LENGTH_REG_LENGTH_r,
  l2h_LANE3_LENGTH_REG_LENGTH_r,
  l2h_LANE4_LENGTH_REG_LENGTH_r,
  l2h_LANE5_LENGTH_REG_LENGTH_r,
  l2h_LANE6_LENGTH_REG_LENGTH_r,
  l2h_LANE7_LENGTH_REG_LENGTH_r,
  l2h_LANE8_LENGTH_REG_LENGTH_r,
  l2h_LANE9_LENGTH_REG_LENGTH_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_ID_REG_w;
  input     [31:0] d2l_ID_REG_w_enable;
  input    d2l_ID_REG_we;
  input    d2l_ID_REG_re;
  input     [31:0] d2l_LANE_ENABLE_REG_w;
  input     [31:0] d2l_LANE_ENABLE_REG_w_enable;
  input    d2l_LANE_ENABLE_REG_we;
  input    d2l_LANE_ENABLE_REG_re;
  input     [31:0] d2l_LANE_IE_REG_w;
  input     [31:0] d2l_LANE_IE_REG_w_enable;
  input    d2l_LANE_IE_REG_we;
  input    d2l_LANE_IE_REG_re;
  input     [31:0] d2l_LANE_START_REG_w;
  input     [31:0] d2l_LANE_START_REG_w_enable;
  input    d2l_LANE_START_REG_we;
  input    d2l_LANE_START_REG_re;
  input     [31:0] d2l_LANE_CLEAR_REG_w;
  input     [31:0] d2l_LANE_CLEAR_REG_w_enable;
  input    d2l_LANE_CLEAR_REG_we;
  input    d2l_LANE_CLEAR_REG_re;
  input     [31:0] d2l_LANE_INT_STATUS_REG_w;
  input     [31:0] d2l_LANE_INT_STATUS_REG_w_enable;
  input    d2l_LANE_INT_STATUS_REG_we;
  input    d2l_LANE_INT_STATUS_REG_re;
  input     [31:0] d2l_LANE_STATUS_REG_w;
  input     [31:0] d2l_LANE_STATUS_REG_w_enable;
  input    d2l_LANE_STATUS_REG_we;
  input    d2l_LANE_STATUS_REG_re;
  input     [31:0] d2l_LANE0_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE0_SEQUENCE_REG_w_enable;
  input    d2l_LANE0_SEQUENCE_REG_we;
  input    d2l_LANE0_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE1_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE1_SEQUENCE_REG_w_enable;
  input    d2l_LANE1_SEQUENCE_REG_we;
  input    d2l_LANE1_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE2_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE2_SEQUENCE_REG_w_enable;
  input    d2l_LANE2_SEQUENCE_REG_we;
  input    d2l_LANE2_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE3_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE3_SEQUENCE_REG_w_enable;
  input    d2l_LANE3_SEQUENCE_REG_we;
  input    d2l_LANE3_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE4_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE4_SEQUENCE_REG_w_enable;
  input    d2l_LANE4_SEQUENCE_REG_we;
  input    d2l_LANE4_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE5_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE5_SEQUENCE_REG_w_enable;
  input    d2l_LANE5_SEQUENCE_REG_we;
  input    d2l_LANE5_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE6_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE6_SEQUENCE_REG_w_enable;
  input    d2l_LANE6_SEQUENCE_REG_we;
  input    d2l_LANE6_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE7_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE7_SEQUENCE_REG_w_enable;
  input    d2l_LANE7_SEQUENCE_REG_we;
  input    d2l_LANE7_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE8_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE8_SEQUENCE_REG_w_enable;
  input    d2l_LANE8_SEQUENCE_REG_we;
  input    d2l_LANE8_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE9_SEQUENCE_REG_w;
  input     [31:0] d2l_LANE9_SEQUENCE_REG_w_enable;
  input    d2l_LANE9_SEQUENCE_REG_we;
  input    d2l_LANE9_SEQUENCE_REG_re;
  input     [31:0] d2l_LANE0_LENGTH_REG_w;
  input     [31:0] d2l_LANE0_LENGTH_REG_w_enable;
  input    d2l_LANE0_LENGTH_REG_we;
  input    d2l_LANE0_LENGTH_REG_re;
  input     [31:0] d2l_LANE1_LENGTH_REG_w;
  input     [31:0] d2l_LANE1_LENGTH_REG_w_enable;
  input    d2l_LANE1_LENGTH_REG_we;
  input    d2l_LANE1_LENGTH_REG_re;
  input     [31:0] d2l_LANE2_LENGTH_REG_w;
  input     [31:0] d2l_LANE2_LENGTH_REG_w_enable;
  input    d2l_LANE2_LENGTH_REG_we;
  input    d2l_LANE2_LENGTH_REG_re;
  input     [31:0] d2l_LANE3_LENGTH_REG_w;
  input     [31:0] d2l_LANE3_LENGTH_REG_w_enable;
  input    d2l_LANE3_LENGTH_REG_we;
  input    d2l_LANE3_LENGTH_REG_re;
  input     [31:0] d2l_LANE4_LENGTH_REG_w;
  input     [31:0] d2l_LANE4_LENGTH_REG_w_enable;
  input    d2l_LANE4_LENGTH_REG_we;
  input    d2l_LANE4_LENGTH_REG_re;
  input     [31:0] d2l_LANE5_LENGTH_REG_w;
  input     [31:0] d2l_LANE5_LENGTH_REG_w_enable;
  input    d2l_LANE5_LENGTH_REG_we;
  input    d2l_LANE5_LENGTH_REG_re;
  input     [31:0] d2l_LANE6_LENGTH_REG_w;
  input     [31:0] d2l_LANE6_LENGTH_REG_w_enable;
  input    d2l_LANE6_LENGTH_REG_we;
  input    d2l_LANE6_LENGTH_REG_re;
  input     [31:0] d2l_LANE7_LENGTH_REG_w;
  input     [31:0] d2l_LANE7_LENGTH_REG_w_enable;
  input    d2l_LANE7_LENGTH_REG_we;
  input    d2l_LANE7_LENGTH_REG_re;
  input     [31:0] d2l_LANE8_LENGTH_REG_w;
  input     [31:0] d2l_LANE8_LENGTH_REG_w_enable;
  input    d2l_LANE8_LENGTH_REG_we;
  input    d2l_LANE8_LENGTH_REG_re;
  input     [31:0] d2l_LANE9_LENGTH_REG_w;
  input     [31:0] d2l_LANE9_LENGTH_REG_w_enable;
  input    d2l_LANE9_LENGTH_REG_we;
  input    d2l_LANE9_LENGTH_REG_re;
  input     [31:0] d2l_LANE0_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE0_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE0_MATCH_COUNT_REG_we;
  input    d2l_LANE0_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE1_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE1_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE1_MATCH_COUNT_REG_we;
  input    d2l_LANE1_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE2_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE2_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE2_MATCH_COUNT_REG_we;
  input    d2l_LANE2_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE3_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE3_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE3_MATCH_COUNT_REG_we;
  input    d2l_LANE3_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE4_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE4_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE4_MATCH_COUNT_REG_we;
  input    d2l_LANE4_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE5_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE5_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE5_MATCH_COUNT_REG_we;
  input    d2l_LANE5_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE6_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE6_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE6_MATCH_COUNT_REG_we;
  input    d2l_LANE6_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE7_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE7_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE7_MATCH_COUNT_REG_we;
  input    d2l_LANE7_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE8_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE8_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE8_MATCH_COUNT_REG_we;
  input    d2l_LANE8_MATCH_COUNT_REG_re;
  input     [31:0] d2l_LANE9_MATCH_COUNT_REG_w;
  input     [31:0] d2l_LANE9_MATCH_COUNT_REG_w_enable;
  input    d2l_LANE9_MATCH_COUNT_REG_we;
  input    d2l_LANE9_MATCH_COUNT_REG_re;
  input    h2l_LANE_INT_STATUS_REG_LANE0_w;
  input    h2l_LANE_INT_STATUS_REG_LANE1_w;
  input    h2l_LANE_INT_STATUS_REG_LANE2_w;
  input    h2l_LANE_INT_STATUS_REG_LANE3_w;
  input    h2l_LANE_INT_STATUS_REG_LANE4_w;
  input    h2l_LANE_INT_STATUS_REG_LANE5_w;
  input    h2l_LANE_INT_STATUS_REG_LANE6_w;
  input    h2l_LANE_INT_STATUS_REG_LANE7_w;
  input    h2l_LANE_INT_STATUS_REG_LANE8_w;
  input    h2l_LANE_INT_STATUS_REG_LANE9_w;
  input    h2l_LANE_STATUS_REG_LANE0_w;
  input    h2l_LANE_STATUS_REG_LANE1_w;
  input    h2l_LANE_STATUS_REG_LANE2_w;
  input    h2l_LANE_STATUS_REG_LANE3_w;
  input    h2l_LANE_STATUS_REG_LANE4_w;
  input    h2l_LANE_STATUS_REG_LANE5_w;
  input    h2l_LANE_STATUS_REG_LANE6_w;
  input    h2l_LANE_STATUS_REG_LANE7_w;
  input    h2l_LANE_STATUS_REG_LANE8_w;
  input    h2l_LANE_STATUS_REG_LANE9_w;
  input     [31:0] h2l_LANE0_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE1_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE2_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE3_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE4_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE5_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE6_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE7_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE8_MATCH_COUNT_REG_MATCH_COUNT_w;
  input     [31:0] h2l_LANE9_MATCH_COUNT_REG_MATCH_COUNT_w;

  //------- outputs
  output     [31:0] l2d_ID_REG_r;
  output     [31:0] l2d_LANE_ENABLE_REG_r;
  output     [31:0] l2d_LANE_IE_REG_r;
  output     [31:0] l2d_LANE_START_REG_r;
  output     [31:0] l2d_LANE_CLEAR_REG_r;
  output     [31:0] l2d_LANE_INT_STATUS_REG_r;
  output     [31:0] l2d_LANE_STATUS_REG_r;
  output     [31:0] l2d_LANE0_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE1_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE2_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE3_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE4_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE5_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE6_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE7_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE8_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE9_SEQUENCE_REG_r;
  output     [31:0] l2d_LANE0_LENGTH_REG_r;
  output     [31:0] l2d_LANE1_LENGTH_REG_r;
  output     [31:0] l2d_LANE2_LENGTH_REG_r;
  output     [31:0] l2d_LANE3_LENGTH_REG_r;
  output     [31:0] l2d_LANE4_LENGTH_REG_r;
  output     [31:0] l2d_LANE5_LENGTH_REG_r;
  output     [31:0] l2d_LANE6_LENGTH_REG_r;
  output     [31:0] l2d_LANE7_LENGTH_REG_r;
  output     [31:0] l2d_LANE8_LENGTH_REG_r;
  output     [31:0] l2d_LANE9_LENGTH_REG_r;
  output     [31:0] l2d_LANE0_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE1_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE2_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE3_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE4_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE5_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE6_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE7_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE8_MATCH_COUNT_REG_r;
  output     [31:0] l2d_LANE9_MATCH_COUNT_REG_r;
  output    l2h_LANE_ENABLE_REG_LANE0_r;
  output    l2h_LANE_ENABLE_REG_LANE1_r;
  output    l2h_LANE_ENABLE_REG_LANE2_r;
  output    l2h_LANE_ENABLE_REG_LANE3_r;
  output    l2h_LANE_ENABLE_REG_LANE4_r;
  output    l2h_LANE_ENABLE_REG_LANE5_r;
  output    l2h_LANE_ENABLE_REG_LANE6_r;
  output    l2h_LANE_ENABLE_REG_LANE7_r;
  output    l2h_LANE_ENABLE_REG_LANE8_r;
  output    l2h_LANE_ENABLE_REG_LANE9_r;
  output    l2h_LANE_IE_REG_LANE0_r;
  output    l2h_LANE_IE_REG_LANE1_r;
  output    l2h_LANE_IE_REG_LANE2_r;
  output    l2h_LANE_IE_REG_LANE3_r;
  output    l2h_LANE_IE_REG_LANE4_r;
  output    l2h_LANE_IE_REG_LANE5_r;
  output    l2h_LANE_IE_REG_LANE6_r;
  output    l2h_LANE_IE_REG_LANE7_r;
  output    l2h_LANE_IE_REG_LANE8_r;
  output    l2h_LANE_IE_REG_LANE9_r;
  output    l2h_LANE_START_REG_LANE0_r;
  output    l2h_LANE_START_REG_LANE1_r;
  output    l2h_LANE_START_REG_LANE2_r;
  output    l2h_LANE_START_REG_LANE3_r;
  output    l2h_LANE_START_REG_LANE4_r;
  output    l2h_LANE_START_REG_LANE5_r;
  output    l2h_LANE_START_REG_LANE6_r;
  output    l2h_LANE_START_REG_LANE7_r;
  output    l2h_LANE_START_REG_LANE8_r;
  output    l2h_LANE_START_REG_LANE9_r;
  output    l2h_LANE_CLEAR_REG_LANE0_r;
  output    l2h_LANE_CLEAR_REG_LANE1_r;
  output    l2h_LANE_CLEAR_REG_LANE2_r;
  output    l2h_LANE_CLEAR_REG_LANE3_r;
  output    l2h_LANE_CLEAR_REG_LANE4_r;
  output    l2h_LANE_CLEAR_REG_LANE5_r;
  output    l2h_LANE_CLEAR_REG_LANE6_r;
  output    l2h_LANE_CLEAR_REG_LANE7_r;
  output    l2h_LANE_CLEAR_REG_LANE8_r;
  output    l2h_LANE_CLEAR_REG_LANE9_r;
  output     [31:0] l2h_LANE0_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE1_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE2_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE3_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE4_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE5_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE6_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE7_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE8_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE9_SEQUENCE_REG_SEQUENCE_r;
  output     [31:0] l2h_LANE0_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE1_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE2_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE3_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE4_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE5_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE6_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE7_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE8_LENGTH_REG_LENGTH_r;
  output     [31:0] l2h_LANE9_LENGTH_REG_LENGTH_r;


  //------- wire defines
  wire   [31:0] rg_ID_REG_ID_VALUE;
  
  //------- reg defines
  reg   [31:0] l2d_ID_REG_r;
  reg  rg_LANE_ENABLE_REG_LANE0;
  reg  reg_LANE_ENABLE_REG_LANE0_next;
  reg  l2h_LANE_ENABLE_REG_LANE0_r;
  reg  rg_LANE_ENABLE_REG_LANE1;
  reg  reg_LANE_ENABLE_REG_LANE1_next;
  reg  l2h_LANE_ENABLE_REG_LANE1_r;
  reg  rg_LANE_ENABLE_REG_LANE2;
  reg  reg_LANE_ENABLE_REG_LANE2_next;
  reg  l2h_LANE_ENABLE_REG_LANE2_r;
  reg  rg_LANE_ENABLE_REG_LANE3;
  reg  reg_LANE_ENABLE_REG_LANE3_next;
  reg  l2h_LANE_ENABLE_REG_LANE3_r;
  reg  rg_LANE_ENABLE_REG_LANE4;
  reg  reg_LANE_ENABLE_REG_LANE4_next;
  reg  l2h_LANE_ENABLE_REG_LANE4_r;
  reg  rg_LANE_ENABLE_REG_LANE5;
  reg  reg_LANE_ENABLE_REG_LANE5_next;
  reg  l2h_LANE_ENABLE_REG_LANE5_r;
  reg  rg_LANE_ENABLE_REG_LANE6;
  reg  reg_LANE_ENABLE_REG_LANE6_next;
  reg  l2h_LANE_ENABLE_REG_LANE6_r;
  reg  rg_LANE_ENABLE_REG_LANE7;
  reg  reg_LANE_ENABLE_REG_LANE7_next;
  reg  l2h_LANE_ENABLE_REG_LANE7_r;
  reg  rg_LANE_ENABLE_REG_LANE8;
  reg  reg_LANE_ENABLE_REG_LANE8_next;
  reg  l2h_LANE_ENABLE_REG_LANE8_r;
  reg  rg_LANE_ENABLE_REG_LANE9;
  reg  reg_LANE_ENABLE_REG_LANE9_next;
  reg  l2h_LANE_ENABLE_REG_LANE9_r;
  reg   [31:0] l2d_LANE_ENABLE_REG_r;
  reg  rg_LANE_IE_REG_LANE0;
  reg  reg_LANE_IE_REG_LANE0_next;
  reg  l2h_LANE_IE_REG_LANE0_r;
  reg  rg_LANE_IE_REG_LANE1;
  reg  reg_LANE_IE_REG_LANE1_next;
  reg  l2h_LANE_IE_REG_LANE1_r;
  reg  rg_LANE_IE_REG_LANE2;
  reg  reg_LANE_IE_REG_LANE2_next;
  reg  l2h_LANE_IE_REG_LANE2_r;
  reg  rg_LANE_IE_REG_LANE3;
  reg  reg_LANE_IE_REG_LANE3_next;
  reg  l2h_LANE_IE_REG_LANE3_r;
  reg  rg_LANE_IE_REG_LANE4;
  reg  reg_LANE_IE_REG_LANE4_next;
  reg  l2h_LANE_IE_REG_LANE4_r;
  reg  rg_LANE_IE_REG_LANE5;
  reg  reg_LANE_IE_REG_LANE5_next;
  reg  l2h_LANE_IE_REG_LANE5_r;
  reg  rg_LANE_IE_REG_LANE6;
  reg  reg_LANE_IE_REG_LANE6_next;
  reg  l2h_LANE_IE_REG_LANE6_r;
  reg  rg_LANE_IE_REG_LANE7;
  reg  reg_LANE_IE_REG_LANE7_next;
  reg  l2h_LANE_IE_REG_LANE7_r;
  reg  rg_LANE_IE_REG_LANE8;
  reg  reg_LANE_IE_REG_LANE8_next;
  reg  l2h_LANE_IE_REG_LANE8_r;
  reg  rg_LANE_IE_REG_LANE9;
  reg  reg_LANE_IE_REG_LANE9_next;
  reg  l2h_LANE_IE_REG_LANE9_r;
  reg   [31:0] l2d_LANE_IE_REG_r;
  reg  rg_LANE_START_REG_LANE0;
  reg  reg_LANE_START_REG_LANE0_next;
  reg  l2h_LANE_START_REG_LANE0_r;
  reg  rg_LANE_START_REG_LANE1;
  reg  reg_LANE_START_REG_LANE1_next;
  reg  l2h_LANE_START_REG_LANE1_r;
  reg  rg_LANE_START_REG_LANE2;
  reg  reg_LANE_START_REG_LANE2_next;
  reg  l2h_LANE_START_REG_LANE2_r;
  reg  rg_LANE_START_REG_LANE3;
  reg  reg_LANE_START_REG_LANE3_next;
  reg  l2h_LANE_START_REG_LANE3_r;
  reg  rg_LANE_START_REG_LANE4;
  reg  reg_LANE_START_REG_LANE4_next;
  reg  l2h_LANE_START_REG_LANE4_r;
  reg  rg_LANE_START_REG_LANE5;
  reg  reg_LANE_START_REG_LANE5_next;
  reg  l2h_LANE_START_REG_LANE5_r;
  reg  rg_LANE_START_REG_LANE6;
  reg  reg_LANE_START_REG_LANE6_next;
  reg  l2h_LANE_START_REG_LANE6_r;
  reg  rg_LANE_START_REG_LANE7;
  reg  reg_LANE_START_REG_LANE7_next;
  reg  l2h_LANE_START_REG_LANE7_r;
  reg  rg_LANE_START_REG_LANE8;
  reg  reg_LANE_START_REG_LANE8_next;
  reg  l2h_LANE_START_REG_LANE8_r;
  reg  rg_LANE_START_REG_LANE9;
  reg  reg_LANE_START_REG_LANE9_next;
  reg  l2h_LANE_START_REG_LANE9_r;
  reg   [31:0] l2d_LANE_START_REG_r;
  reg  rg_LANE_CLEAR_REG_LANE0;
  reg  reg_LANE_CLEAR_REG_LANE0_next;
  reg  l2h_LANE_CLEAR_REG_LANE0_r;
  reg  rg_LANE_CLEAR_REG_LANE1;
  reg  reg_LANE_CLEAR_REG_LANE1_next;
  reg  l2h_LANE_CLEAR_REG_LANE1_r;
  reg  rg_LANE_CLEAR_REG_LANE2;
  reg  reg_LANE_CLEAR_REG_LANE2_next;
  reg  l2h_LANE_CLEAR_REG_LANE2_r;
  reg  rg_LANE_CLEAR_REG_LANE3;
  reg  reg_LANE_CLEAR_REG_LANE3_next;
  reg  l2h_LANE_CLEAR_REG_LANE3_r;
  reg  rg_LANE_CLEAR_REG_LANE4;
  reg  reg_LANE_CLEAR_REG_LANE4_next;
  reg  l2h_LANE_CLEAR_REG_LANE4_r;
  reg  rg_LANE_CLEAR_REG_LANE5;
  reg  reg_LANE_CLEAR_REG_LANE5_next;
  reg  l2h_LANE_CLEAR_REG_LANE5_r;
  reg  rg_LANE_CLEAR_REG_LANE6;
  reg  reg_LANE_CLEAR_REG_LANE6_next;
  reg  l2h_LANE_CLEAR_REG_LANE6_r;
  reg  rg_LANE_CLEAR_REG_LANE7;
  reg  reg_LANE_CLEAR_REG_LANE7_next;
  reg  l2h_LANE_CLEAR_REG_LANE7_r;
  reg  rg_LANE_CLEAR_REG_LANE8;
  reg  reg_LANE_CLEAR_REG_LANE8_next;
  reg  l2h_LANE_CLEAR_REG_LANE8_r;
  reg  rg_LANE_CLEAR_REG_LANE9;
  reg  reg_LANE_CLEAR_REG_LANE9_next;
  reg  l2h_LANE_CLEAR_REG_LANE9_r;
  reg   [31:0] l2d_LANE_CLEAR_REG_r;
  reg  rg_LANE_INT_STATUS_REG_LANE0;
  reg  rg_LANE_INT_STATUS_REG_LANE1;
  reg  rg_LANE_INT_STATUS_REG_LANE2;
  reg  rg_LANE_INT_STATUS_REG_LANE3;
  reg  rg_LANE_INT_STATUS_REG_LANE4;
  reg  rg_LANE_INT_STATUS_REG_LANE5;
  reg  rg_LANE_INT_STATUS_REG_LANE6;
  reg  rg_LANE_INT_STATUS_REG_LANE7;
  reg  rg_LANE_INT_STATUS_REG_LANE8;
  reg  rg_LANE_INT_STATUS_REG_LANE9;
  reg   [31:0] l2d_LANE_INT_STATUS_REG_r;
  reg  rg_LANE_STATUS_REG_LANE0;
  reg  rg_LANE_STATUS_REG_LANE1;
  reg  rg_LANE_STATUS_REG_LANE2;
  reg  rg_LANE_STATUS_REG_LANE3;
  reg  rg_LANE_STATUS_REG_LANE4;
  reg  rg_LANE_STATUS_REG_LANE5;
  reg  rg_LANE_STATUS_REG_LANE6;
  reg  rg_LANE_STATUS_REG_LANE7;
  reg  rg_LANE_STATUS_REG_LANE8;
  reg  rg_LANE_STATUS_REG_LANE9;
  reg   [31:0] l2d_LANE_STATUS_REG_r;
  reg   [31:0] rg_LANE0_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE0_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE0_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE0_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE1_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE1_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE1_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE1_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE2_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE2_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE2_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE2_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE3_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE3_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE3_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE3_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE4_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE4_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE4_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE4_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE5_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE5_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE5_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE5_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE6_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE6_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE6_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE6_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE7_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE7_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE7_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE7_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE8_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE8_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE8_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE8_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE9_SEQUENCE_REG_SEQUENCE;
  reg   [31:0] reg_LANE9_SEQUENCE_REG_SEQUENCE_next;
  reg   [31:0] l2h_LANE9_SEQUENCE_REG_SEQUENCE_r;
  reg   [31:0] l2d_LANE9_SEQUENCE_REG_r;
  reg   [31:0] rg_LANE0_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE0_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE0_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE0_LENGTH_REG_r;
  reg   [31:0] rg_LANE1_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE1_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE1_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE1_LENGTH_REG_r;
  reg   [31:0] rg_LANE2_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE2_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE2_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE2_LENGTH_REG_r;
  reg   [31:0] rg_LANE3_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE3_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE3_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE3_LENGTH_REG_r;
  reg   [31:0] rg_LANE4_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE4_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE4_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE4_LENGTH_REG_r;
  reg   [31:0] rg_LANE5_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE5_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE5_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE5_LENGTH_REG_r;
  reg   [31:0] rg_LANE6_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE6_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE6_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE6_LENGTH_REG_r;
  reg   [31:0] rg_LANE7_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE7_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE7_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE7_LENGTH_REG_r;
  reg   [31:0] rg_LANE8_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE8_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE8_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE8_LENGTH_REG_r;
  reg   [31:0] rg_LANE9_LENGTH_REG_LENGTH;
  reg   [31:0] reg_LANE9_LENGTH_REG_LENGTH_next;
  reg   [31:0] l2h_LANE9_LENGTH_REG_LENGTH_r;
  reg   [31:0] l2d_LANE9_LENGTH_REG_r;
  reg   [31:0] rg_LANE0_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE0_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE1_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE1_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE2_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE2_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE3_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE3_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE4_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE4_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE5_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE5_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE6_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE6_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE7_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE7_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE8_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE8_MATCH_COUNT_REG_r;
  reg   [31:0] rg_LANE9_MATCH_COUNT_REG_MATCH_COUNT;
  reg   [31:0] l2d_LANE9_MATCH_COUNT_REG_r;
  
  
  //------- assigns
  assign  rg_ID_REG_ID_VALUE = 32'h5a5a5a5a;
  
  //------- combinatorial assigns for LANE0_SEQUENCE_REG
  always @ (*) begin
    reg_LANE0_SEQUENCE_REG_SEQUENCE_next = rg_LANE0_SEQUENCE_REG_SEQUENCE;
    l2h_LANE0_SEQUENCE_REG_SEQUENCE_r = rg_LANE0_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE0_SEQUENCE_REG_we) reg_LANE0_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE0_SEQUENCE_REG_w & d2l_LANE0_SEQUENCE_REG_w_enable) | (reg_LANE0_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE0_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE0_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE0_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE0_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE0_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE2_SEQUENCE_REG
  always @ (*) begin
    reg_LANE2_SEQUENCE_REG_SEQUENCE_next = rg_LANE2_SEQUENCE_REG_SEQUENCE;
    l2h_LANE2_SEQUENCE_REG_SEQUENCE_r = rg_LANE2_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE2_SEQUENCE_REG_we) reg_LANE2_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE2_SEQUENCE_REG_w & d2l_LANE2_SEQUENCE_REG_w_enable) | (reg_LANE2_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE2_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE2_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE2_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE2_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE2_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE4_SEQUENCE_REG
  always @ (*) begin
    reg_LANE4_SEQUENCE_REG_SEQUENCE_next = rg_LANE4_SEQUENCE_REG_SEQUENCE;
    l2h_LANE4_SEQUENCE_REG_SEQUENCE_r = rg_LANE4_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE4_SEQUENCE_REG_we) reg_LANE4_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE4_SEQUENCE_REG_w & d2l_LANE4_SEQUENCE_REG_w_enable) | (reg_LANE4_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE4_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE4_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE4_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE4_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE4_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE_STATUS_REG (pio read data)
  always @ (*) begin
    l2d_LANE_STATUS_REG_r = 32'b0;
    l2d_LANE_STATUS_REG_r [0]  = rg_LANE_STATUS_REG_LANE0;
    l2d_LANE_STATUS_REG_r [1]  = rg_LANE_STATUS_REG_LANE1;
    l2d_LANE_STATUS_REG_r [2]  = rg_LANE_STATUS_REG_LANE2;
    l2d_LANE_STATUS_REG_r [3]  = rg_LANE_STATUS_REG_LANE3;
    l2d_LANE_STATUS_REG_r [4]  = rg_LANE_STATUS_REG_LANE4;
    l2d_LANE_STATUS_REG_r [5]  = rg_LANE_STATUS_REG_LANE5;
    l2d_LANE_STATUS_REG_r [6]  = rg_LANE_STATUS_REG_LANE6;
    l2d_LANE_STATUS_REG_r [7]  = rg_LANE_STATUS_REG_LANE7;
    l2d_LANE_STATUS_REG_r [8]  = rg_LANE_STATUS_REG_LANE8;
    l2d_LANE_STATUS_REG_r [9]  = rg_LANE_STATUS_REG_LANE9;
  end
  
  //------- combinatorial assigns for LANE4_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE4_LENGTH_REG_r = rg_LANE4_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE_START_REG
  always @ (*) begin
    reg_LANE_START_REG_LANE0_next = 0;
    l2h_LANE_START_REG_LANE0_r = rg_LANE_START_REG_LANE0;
    reg_LANE_START_REG_LANE1_next = 0;
    l2h_LANE_START_REG_LANE1_r = rg_LANE_START_REG_LANE1;
    reg_LANE_START_REG_LANE2_next = 0;
    l2h_LANE_START_REG_LANE2_r = rg_LANE_START_REG_LANE2;
    reg_LANE_START_REG_LANE3_next = 0;
    l2h_LANE_START_REG_LANE3_r = rg_LANE_START_REG_LANE3;
    reg_LANE_START_REG_LANE4_next = 0;
    l2h_LANE_START_REG_LANE4_r = rg_LANE_START_REG_LANE4;
    reg_LANE_START_REG_LANE5_next = 0;
    l2h_LANE_START_REG_LANE5_r = rg_LANE_START_REG_LANE5;
    reg_LANE_START_REG_LANE6_next = 0;
    l2h_LANE_START_REG_LANE6_r = rg_LANE_START_REG_LANE6;
    reg_LANE_START_REG_LANE7_next = 0;
    l2h_LANE_START_REG_LANE7_r = rg_LANE_START_REG_LANE7;
    reg_LANE_START_REG_LANE8_next = 0;
    l2h_LANE_START_REG_LANE8_r = rg_LANE_START_REG_LANE8;
    reg_LANE_START_REG_LANE9_next = 0;
    l2h_LANE_START_REG_LANE9_r = rg_LANE_START_REG_LANE9;
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE0_next = ((d2l_LANE_START_REG_w [0]  & d2l_LANE_START_REG_w_enable [0] ) | (reg_LANE_START_REG_LANE0_next & ~d2l_LANE_START_REG_w_enable [0] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE1_next = ((d2l_LANE_START_REG_w [1]  & d2l_LANE_START_REG_w_enable [1] ) | (reg_LANE_START_REG_LANE1_next & ~d2l_LANE_START_REG_w_enable [1] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE2_next = ((d2l_LANE_START_REG_w [2]  & d2l_LANE_START_REG_w_enable [2] ) | (reg_LANE_START_REG_LANE2_next & ~d2l_LANE_START_REG_w_enable [2] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE3_next = ((d2l_LANE_START_REG_w [3]  & d2l_LANE_START_REG_w_enable [3] ) | (reg_LANE_START_REG_LANE3_next & ~d2l_LANE_START_REG_w_enable [3] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE4_next = ((d2l_LANE_START_REG_w [4]  & d2l_LANE_START_REG_w_enable [4] ) | (reg_LANE_START_REG_LANE4_next & ~d2l_LANE_START_REG_w_enable [4] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE5_next = ((d2l_LANE_START_REG_w [5]  & d2l_LANE_START_REG_w_enable [5] ) | (reg_LANE_START_REG_LANE5_next & ~d2l_LANE_START_REG_w_enable [5] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE6_next = ((d2l_LANE_START_REG_w [6]  & d2l_LANE_START_REG_w_enable [6] ) | (reg_LANE_START_REG_LANE6_next & ~d2l_LANE_START_REG_w_enable [6] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE7_next = ((d2l_LANE_START_REG_w [7]  & d2l_LANE_START_REG_w_enable [7] ) | (reg_LANE_START_REG_LANE7_next & ~d2l_LANE_START_REG_w_enable [7] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE8_next = ((d2l_LANE_START_REG_w [8]  & d2l_LANE_START_REG_w_enable [8] ) | (reg_LANE_START_REG_LANE8_next & ~d2l_LANE_START_REG_w_enable [8] ));
    if (d2l_LANE_START_REG_we) reg_LANE_START_REG_LANE9_next = ((d2l_LANE_START_REG_w [9]  & d2l_LANE_START_REG_w_enable [9] ) | (reg_LANE_START_REG_LANE9_next & ~d2l_LANE_START_REG_w_enable [9] ));
  end
  
  //------- reg assigns for LANE_START_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE_START_REG_LANE0 <= #1 1'b0;
      rg_LANE_START_REG_LANE1 <= #1 1'b0;
      rg_LANE_START_REG_LANE2 <= #1 1'b0;
      rg_LANE_START_REG_LANE3 <= #1 1'b0;
      rg_LANE_START_REG_LANE4 <= #1 1'b0;
      rg_LANE_START_REG_LANE5 <= #1 1'b0;
      rg_LANE_START_REG_LANE6 <= #1 1'b0;
      rg_LANE_START_REG_LANE7 <= #1 1'b0;
      rg_LANE_START_REG_LANE8 <= #1 1'b0;
      rg_LANE_START_REG_LANE9 <= #1 1'b0;
    end
    else begin
      rg_LANE_START_REG_LANE0 <= #1  reg_LANE_START_REG_LANE0_next;
      rg_LANE_START_REG_LANE1 <= #1  reg_LANE_START_REG_LANE1_next;
      rg_LANE_START_REG_LANE2 <= #1  reg_LANE_START_REG_LANE2_next;
      rg_LANE_START_REG_LANE3 <= #1  reg_LANE_START_REG_LANE3_next;
      rg_LANE_START_REG_LANE4 <= #1  reg_LANE_START_REG_LANE4_next;
      rg_LANE_START_REG_LANE5 <= #1  reg_LANE_START_REG_LANE5_next;
      rg_LANE_START_REG_LANE6 <= #1  reg_LANE_START_REG_LANE6_next;
      rg_LANE_START_REG_LANE7 <= #1  reg_LANE_START_REG_LANE7_next;
      rg_LANE_START_REG_LANE8 <= #1  reg_LANE_START_REG_LANE8_next;
      rg_LANE_START_REG_LANE9 <= #1  reg_LANE_START_REG_LANE9_next;
    end
  end
  
  //------- combinatorial assigns for LANE_CLEAR_REG (pio read data)
  always @ (*) begin
    l2d_LANE_CLEAR_REG_r = 32'b0;
    l2d_LANE_CLEAR_REG_r [0]  = rg_LANE_CLEAR_REG_LANE0;
    l2d_LANE_CLEAR_REG_r [1]  = rg_LANE_CLEAR_REG_LANE1;
    l2d_LANE_CLEAR_REG_r [2]  = rg_LANE_CLEAR_REG_LANE2;
    l2d_LANE_CLEAR_REG_r [3]  = rg_LANE_CLEAR_REG_LANE3;
    l2d_LANE_CLEAR_REG_r [4]  = rg_LANE_CLEAR_REG_LANE4;
    l2d_LANE_CLEAR_REG_r [5]  = rg_LANE_CLEAR_REG_LANE5;
    l2d_LANE_CLEAR_REG_r [6]  = rg_LANE_CLEAR_REG_LANE6;
    l2d_LANE_CLEAR_REG_r [7]  = rg_LANE_CLEAR_REG_LANE7;
    l2d_LANE_CLEAR_REG_r [8]  = rg_LANE_CLEAR_REG_LANE8;
    l2d_LANE_CLEAR_REG_r [9]  = rg_LANE_CLEAR_REG_LANE9;
  end
  
  //------- combinatorial assigns for LANE5_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE5_LENGTH_REG_r = rg_LANE5_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE0_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE0_SEQUENCE_REG_r = rg_LANE0_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE1_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE1_SEQUENCE_REG_r = rg_LANE1_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE8_SEQUENCE_REG
  always @ (*) begin
    reg_LANE8_SEQUENCE_REG_SEQUENCE_next = rg_LANE8_SEQUENCE_REG_SEQUENCE;
    l2h_LANE8_SEQUENCE_REG_SEQUENCE_r = rg_LANE8_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE8_SEQUENCE_REG_we) reg_LANE8_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE8_SEQUENCE_REG_w & d2l_LANE8_SEQUENCE_REG_w_enable) | (reg_LANE8_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE8_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE8_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE8_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE8_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE8_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE9_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE9_SEQUENCE_REG_r = rg_LANE9_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE6_SEQUENCE_REG
  always @ (*) begin
    reg_LANE6_SEQUENCE_REG_SEQUENCE_next = rg_LANE6_SEQUENCE_REG_SEQUENCE;
    l2h_LANE6_SEQUENCE_REG_SEQUENCE_r = rg_LANE6_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE6_SEQUENCE_REG_we) reg_LANE6_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE6_SEQUENCE_REG_w & d2l_LANE6_SEQUENCE_REG_w_enable) | (reg_LANE6_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE6_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE6_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE6_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE6_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE6_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE_IE_REG
  always @ (*) begin
    reg_LANE_IE_REG_LANE0_next = rg_LANE_IE_REG_LANE0;
    l2h_LANE_IE_REG_LANE0_r = rg_LANE_IE_REG_LANE0;
    reg_LANE_IE_REG_LANE1_next = rg_LANE_IE_REG_LANE1;
    l2h_LANE_IE_REG_LANE1_r = rg_LANE_IE_REG_LANE1;
    reg_LANE_IE_REG_LANE2_next = rg_LANE_IE_REG_LANE2;
    l2h_LANE_IE_REG_LANE2_r = rg_LANE_IE_REG_LANE2;
    reg_LANE_IE_REG_LANE3_next = rg_LANE_IE_REG_LANE3;
    l2h_LANE_IE_REG_LANE3_r = rg_LANE_IE_REG_LANE3;
    reg_LANE_IE_REG_LANE4_next = rg_LANE_IE_REG_LANE4;
    l2h_LANE_IE_REG_LANE4_r = rg_LANE_IE_REG_LANE4;
    reg_LANE_IE_REG_LANE5_next = rg_LANE_IE_REG_LANE5;
    l2h_LANE_IE_REG_LANE5_r = rg_LANE_IE_REG_LANE5;
    reg_LANE_IE_REG_LANE6_next = rg_LANE_IE_REG_LANE6;
    l2h_LANE_IE_REG_LANE6_r = rg_LANE_IE_REG_LANE6;
    reg_LANE_IE_REG_LANE7_next = rg_LANE_IE_REG_LANE7;
    l2h_LANE_IE_REG_LANE7_r = rg_LANE_IE_REG_LANE7;
    reg_LANE_IE_REG_LANE8_next = rg_LANE_IE_REG_LANE8;
    l2h_LANE_IE_REG_LANE8_r = rg_LANE_IE_REG_LANE8;
    reg_LANE_IE_REG_LANE9_next = rg_LANE_IE_REG_LANE9;
    l2h_LANE_IE_REG_LANE9_r = rg_LANE_IE_REG_LANE9;
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE0_next = ((d2l_LANE_IE_REG_w [0]  & d2l_LANE_IE_REG_w_enable [0] ) | (reg_LANE_IE_REG_LANE0_next & ~d2l_LANE_IE_REG_w_enable [0] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE1_next = ((d2l_LANE_IE_REG_w [1]  & d2l_LANE_IE_REG_w_enable [1] ) | (reg_LANE_IE_REG_LANE1_next & ~d2l_LANE_IE_REG_w_enable [1] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE2_next = ((d2l_LANE_IE_REG_w [2]  & d2l_LANE_IE_REG_w_enable [2] ) | (reg_LANE_IE_REG_LANE2_next & ~d2l_LANE_IE_REG_w_enable [2] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE3_next = ((d2l_LANE_IE_REG_w [3]  & d2l_LANE_IE_REG_w_enable [3] ) | (reg_LANE_IE_REG_LANE3_next & ~d2l_LANE_IE_REG_w_enable [3] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE4_next = ((d2l_LANE_IE_REG_w [4]  & d2l_LANE_IE_REG_w_enable [4] ) | (reg_LANE_IE_REG_LANE4_next & ~d2l_LANE_IE_REG_w_enable [4] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE5_next = ((d2l_LANE_IE_REG_w [5]  & d2l_LANE_IE_REG_w_enable [5] ) | (reg_LANE_IE_REG_LANE5_next & ~d2l_LANE_IE_REG_w_enable [5] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE6_next = ((d2l_LANE_IE_REG_w [6]  & d2l_LANE_IE_REG_w_enable [6] ) | (reg_LANE_IE_REG_LANE6_next & ~d2l_LANE_IE_REG_w_enable [6] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE7_next = ((d2l_LANE_IE_REG_w [7]  & d2l_LANE_IE_REG_w_enable [7] ) | (reg_LANE_IE_REG_LANE7_next & ~d2l_LANE_IE_REG_w_enable [7] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE8_next = ((d2l_LANE_IE_REG_w [8]  & d2l_LANE_IE_REG_w_enable [8] ) | (reg_LANE_IE_REG_LANE8_next & ~d2l_LANE_IE_REG_w_enable [8] ));
    if (d2l_LANE_IE_REG_we) reg_LANE_IE_REG_LANE9_next = ((d2l_LANE_IE_REG_w [9]  & d2l_LANE_IE_REG_w_enable [9] ) | (reg_LANE_IE_REG_LANE9_next & ~d2l_LANE_IE_REG_w_enable [9] ));
  end
  
  //------- reg assigns for LANE_IE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE_IE_REG_LANE0 <= #1 1'b0;
      rg_LANE_IE_REG_LANE1 <= #1 1'b0;
      rg_LANE_IE_REG_LANE2 <= #1 1'b0;
      rg_LANE_IE_REG_LANE3 <= #1 1'b0;
      rg_LANE_IE_REG_LANE4 <= #1 1'b0;
      rg_LANE_IE_REG_LANE5 <= #1 1'b0;
      rg_LANE_IE_REG_LANE6 <= #1 1'b0;
      rg_LANE_IE_REG_LANE7 <= #1 1'b0;
      rg_LANE_IE_REG_LANE8 <= #1 1'b0;
      rg_LANE_IE_REG_LANE9 <= #1 1'b0;
    end
    else begin
      rg_LANE_IE_REG_LANE0 <= #1  reg_LANE_IE_REG_LANE0_next;
      rg_LANE_IE_REG_LANE1 <= #1  reg_LANE_IE_REG_LANE1_next;
      rg_LANE_IE_REG_LANE2 <= #1  reg_LANE_IE_REG_LANE2_next;
      rg_LANE_IE_REG_LANE3 <= #1  reg_LANE_IE_REG_LANE3_next;
      rg_LANE_IE_REG_LANE4 <= #1  reg_LANE_IE_REG_LANE4_next;
      rg_LANE_IE_REG_LANE5 <= #1  reg_LANE_IE_REG_LANE5_next;
      rg_LANE_IE_REG_LANE6 <= #1  reg_LANE_IE_REG_LANE6_next;
      rg_LANE_IE_REG_LANE7 <= #1  reg_LANE_IE_REG_LANE7_next;
      rg_LANE_IE_REG_LANE8 <= #1  reg_LANE_IE_REG_LANE8_next;
      rg_LANE_IE_REG_LANE9 <= #1  reg_LANE_IE_REG_LANE9_next;
    end
  end
  
  //------- combinatorial assigns for LANE8_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE8_MATCH_COUNT_REG_r = rg_LANE8_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE6_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE6_LENGTH_REG_r = rg_LANE6_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE5_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE5_MATCH_COUNT_REG_r = rg_LANE5_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE2_LENGTH_REG
  always @ (*) begin
    reg_LANE2_LENGTH_REG_LENGTH_next = rg_LANE2_LENGTH_REG_LENGTH;
    l2h_LANE2_LENGTH_REG_LENGTH_r = rg_LANE2_LENGTH_REG_LENGTH;
    if (d2l_LANE2_LENGTH_REG_we) reg_LANE2_LENGTH_REG_LENGTH_next = ((d2l_LANE2_LENGTH_REG_w & d2l_LANE2_LENGTH_REG_w_enable) | (reg_LANE2_LENGTH_REG_LENGTH_next & ~d2l_LANE2_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE2_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE2_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE2_LENGTH_REG_LENGTH <= #1  reg_LANE2_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE_ENABLE_REG
  always @ (*) begin
    reg_LANE_ENABLE_REG_LANE0_next = rg_LANE_ENABLE_REG_LANE0;
    l2h_LANE_ENABLE_REG_LANE0_r = rg_LANE_ENABLE_REG_LANE0;
    reg_LANE_ENABLE_REG_LANE1_next = rg_LANE_ENABLE_REG_LANE1;
    l2h_LANE_ENABLE_REG_LANE1_r = rg_LANE_ENABLE_REG_LANE1;
    reg_LANE_ENABLE_REG_LANE2_next = rg_LANE_ENABLE_REG_LANE2;
    l2h_LANE_ENABLE_REG_LANE2_r = rg_LANE_ENABLE_REG_LANE2;
    reg_LANE_ENABLE_REG_LANE3_next = rg_LANE_ENABLE_REG_LANE3;
    l2h_LANE_ENABLE_REG_LANE3_r = rg_LANE_ENABLE_REG_LANE3;
    reg_LANE_ENABLE_REG_LANE4_next = rg_LANE_ENABLE_REG_LANE4;
    l2h_LANE_ENABLE_REG_LANE4_r = rg_LANE_ENABLE_REG_LANE4;
    reg_LANE_ENABLE_REG_LANE5_next = rg_LANE_ENABLE_REG_LANE5;
    l2h_LANE_ENABLE_REG_LANE5_r = rg_LANE_ENABLE_REG_LANE5;
    reg_LANE_ENABLE_REG_LANE6_next = rg_LANE_ENABLE_REG_LANE6;
    l2h_LANE_ENABLE_REG_LANE6_r = rg_LANE_ENABLE_REG_LANE6;
    reg_LANE_ENABLE_REG_LANE7_next = rg_LANE_ENABLE_REG_LANE7;
    l2h_LANE_ENABLE_REG_LANE7_r = rg_LANE_ENABLE_REG_LANE7;
    reg_LANE_ENABLE_REG_LANE8_next = rg_LANE_ENABLE_REG_LANE8;
    l2h_LANE_ENABLE_REG_LANE8_r = rg_LANE_ENABLE_REG_LANE8;
    reg_LANE_ENABLE_REG_LANE9_next = rg_LANE_ENABLE_REG_LANE9;
    l2h_LANE_ENABLE_REG_LANE9_r = rg_LANE_ENABLE_REG_LANE9;
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE0_next = ((d2l_LANE_ENABLE_REG_w [0]  & d2l_LANE_ENABLE_REG_w_enable [0] ) | (reg_LANE_ENABLE_REG_LANE0_next & ~d2l_LANE_ENABLE_REG_w_enable [0] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE1_next = ((d2l_LANE_ENABLE_REG_w [1]  & d2l_LANE_ENABLE_REG_w_enable [1] ) | (reg_LANE_ENABLE_REG_LANE1_next & ~d2l_LANE_ENABLE_REG_w_enable [1] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE2_next = ((d2l_LANE_ENABLE_REG_w [2]  & d2l_LANE_ENABLE_REG_w_enable [2] ) | (reg_LANE_ENABLE_REG_LANE2_next & ~d2l_LANE_ENABLE_REG_w_enable [2] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE3_next = ((d2l_LANE_ENABLE_REG_w [3]  & d2l_LANE_ENABLE_REG_w_enable [3] ) | (reg_LANE_ENABLE_REG_LANE3_next & ~d2l_LANE_ENABLE_REG_w_enable [3] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE4_next = ((d2l_LANE_ENABLE_REG_w [4]  & d2l_LANE_ENABLE_REG_w_enable [4] ) | (reg_LANE_ENABLE_REG_LANE4_next & ~d2l_LANE_ENABLE_REG_w_enable [4] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE5_next = ((d2l_LANE_ENABLE_REG_w [5]  & d2l_LANE_ENABLE_REG_w_enable [5] ) | (reg_LANE_ENABLE_REG_LANE5_next & ~d2l_LANE_ENABLE_REG_w_enable [5] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE6_next = ((d2l_LANE_ENABLE_REG_w [6]  & d2l_LANE_ENABLE_REG_w_enable [6] ) | (reg_LANE_ENABLE_REG_LANE6_next & ~d2l_LANE_ENABLE_REG_w_enable [6] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE7_next = ((d2l_LANE_ENABLE_REG_w [7]  & d2l_LANE_ENABLE_REG_w_enable [7] ) | (reg_LANE_ENABLE_REG_LANE7_next & ~d2l_LANE_ENABLE_REG_w_enable [7] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE8_next = ((d2l_LANE_ENABLE_REG_w [8]  & d2l_LANE_ENABLE_REG_w_enable [8] ) | (reg_LANE_ENABLE_REG_LANE8_next & ~d2l_LANE_ENABLE_REG_w_enable [8] ));
    if (d2l_LANE_ENABLE_REG_we) reg_LANE_ENABLE_REG_LANE9_next = ((d2l_LANE_ENABLE_REG_w [9]  & d2l_LANE_ENABLE_REG_w_enable [9] ) | (reg_LANE_ENABLE_REG_LANE9_next & ~d2l_LANE_ENABLE_REG_w_enable [9] ));
  end
  
  //------- reg assigns for LANE_ENABLE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE_ENABLE_REG_LANE0 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE1 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE2 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE3 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE4 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE5 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE6 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE7 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE8 <= #1 1'b0;
      rg_LANE_ENABLE_REG_LANE9 <= #1 1'b0;
    end
    else begin
      rg_LANE_ENABLE_REG_LANE0 <= #1  reg_LANE_ENABLE_REG_LANE0_next;
      rg_LANE_ENABLE_REG_LANE1 <= #1  reg_LANE_ENABLE_REG_LANE1_next;
      rg_LANE_ENABLE_REG_LANE2 <= #1  reg_LANE_ENABLE_REG_LANE2_next;
      rg_LANE_ENABLE_REG_LANE3 <= #1  reg_LANE_ENABLE_REG_LANE3_next;
      rg_LANE_ENABLE_REG_LANE4 <= #1  reg_LANE_ENABLE_REG_LANE4_next;
      rg_LANE_ENABLE_REG_LANE5 <= #1  reg_LANE_ENABLE_REG_LANE5_next;
      rg_LANE_ENABLE_REG_LANE6 <= #1  reg_LANE_ENABLE_REG_LANE6_next;
      rg_LANE_ENABLE_REG_LANE7 <= #1  reg_LANE_ENABLE_REG_LANE7_next;
      rg_LANE_ENABLE_REG_LANE8 <= #1  reg_LANE_ENABLE_REG_LANE8_next;
      rg_LANE_ENABLE_REG_LANE9 <= #1  reg_LANE_ENABLE_REG_LANE9_next;
    end
  end
  
  //------- combinatorial assigns for LANE1_LENGTH_REG
  always @ (*) begin
    reg_LANE1_LENGTH_REG_LENGTH_next = rg_LANE1_LENGTH_REG_LENGTH;
    l2h_LANE1_LENGTH_REG_LENGTH_r = rg_LANE1_LENGTH_REG_LENGTH;
    if (d2l_LANE1_LENGTH_REG_we) reg_LANE1_LENGTH_REG_LENGTH_next = ((d2l_LANE1_LENGTH_REG_w & d2l_LANE1_LENGTH_REG_w_enable) | (reg_LANE1_LENGTH_REG_LENGTH_next & ~d2l_LANE1_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE1_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE1_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE1_LENGTH_REG_LENGTH <= #1  reg_LANE1_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE_ENABLE_REG (pio read data)
  always @ (*) begin
    l2d_LANE_ENABLE_REG_r = 32'b0;
    l2d_LANE_ENABLE_REG_r [0]  = rg_LANE_ENABLE_REG_LANE0;
    l2d_LANE_ENABLE_REG_r [1]  = rg_LANE_ENABLE_REG_LANE1;
    l2d_LANE_ENABLE_REG_r [2]  = rg_LANE_ENABLE_REG_LANE2;
    l2d_LANE_ENABLE_REG_r [3]  = rg_LANE_ENABLE_REG_LANE3;
    l2d_LANE_ENABLE_REG_r [4]  = rg_LANE_ENABLE_REG_LANE4;
    l2d_LANE_ENABLE_REG_r [5]  = rg_LANE_ENABLE_REG_LANE5;
    l2d_LANE_ENABLE_REG_r [6]  = rg_LANE_ENABLE_REG_LANE6;
    l2d_LANE_ENABLE_REG_r [7]  = rg_LANE_ENABLE_REG_LANE7;
    l2d_LANE_ENABLE_REG_r [8]  = rg_LANE_ENABLE_REG_LANE8;
    l2d_LANE_ENABLE_REG_r [9]  = rg_LANE_ENABLE_REG_LANE9;
  end
  
  //------- combinatorial assigns for LANE_INT_STATUS_REG (pio read data)
  always @ (*) begin
    l2d_LANE_INT_STATUS_REG_r = 32'b0;
    l2d_LANE_INT_STATUS_REG_r [0]  = rg_LANE_INT_STATUS_REG_LANE0;
    l2d_LANE_INT_STATUS_REG_r [1]  = rg_LANE_INT_STATUS_REG_LANE1;
    l2d_LANE_INT_STATUS_REG_r [2]  = rg_LANE_INT_STATUS_REG_LANE2;
    l2d_LANE_INT_STATUS_REG_r [3]  = rg_LANE_INT_STATUS_REG_LANE3;
    l2d_LANE_INT_STATUS_REG_r [4]  = rg_LANE_INT_STATUS_REG_LANE4;
    l2d_LANE_INT_STATUS_REG_r [5]  = rg_LANE_INT_STATUS_REG_LANE5;
    l2d_LANE_INT_STATUS_REG_r [6]  = rg_LANE_INT_STATUS_REG_LANE6;
    l2d_LANE_INT_STATUS_REG_r [7]  = rg_LANE_INT_STATUS_REG_LANE7;
    l2d_LANE_INT_STATUS_REG_r [8]  = rg_LANE_INT_STATUS_REG_LANE8;
    l2d_LANE_INT_STATUS_REG_r [9]  = rg_LANE_INT_STATUS_REG_LANE9;
  end
  
  //------- combinatorial assigns for ID_REG (pio read data)
  always @ (*) begin
    l2d_ID_REG_r = rg_ID_REG_ID_VALUE;
  end
  
  //------- combinatorial assigns for LANE7_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE7_MATCH_COUNT_REG_r = rg_LANE7_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE7_LENGTH_REG
  always @ (*) begin
    reg_LANE7_LENGTH_REG_LENGTH_next = rg_LANE7_LENGTH_REG_LENGTH;
    l2h_LANE7_LENGTH_REG_LENGTH_r = rg_LANE7_LENGTH_REG_LENGTH;
    if (d2l_LANE7_LENGTH_REG_we) reg_LANE7_LENGTH_REG_LENGTH_next = ((d2l_LANE7_LENGTH_REG_w & d2l_LANE7_LENGTH_REG_w_enable) | (reg_LANE7_LENGTH_REG_LENGTH_next & ~d2l_LANE7_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE7_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE7_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE7_LENGTH_REG_LENGTH <= #1  reg_LANE7_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE5_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE5_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE5_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE0_LENGTH_REG
  always @ (*) begin
    reg_LANE0_LENGTH_REG_LENGTH_next = rg_LANE0_LENGTH_REG_LENGTH;
    l2h_LANE0_LENGTH_REG_LENGTH_r = rg_LANE0_LENGTH_REG_LENGTH;
    if (d2l_LANE0_LENGTH_REG_we) reg_LANE0_LENGTH_REG_LENGTH_next = ((d2l_LANE0_LENGTH_REG_w & d2l_LANE0_LENGTH_REG_w_enable) | (reg_LANE0_LENGTH_REG_LENGTH_next & ~d2l_LANE0_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE0_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE0_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE0_LENGTH_REG_LENGTH <= #1  reg_LANE0_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE1_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE1_MATCH_COUNT_REG_r = rg_LANE1_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE3_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE3_LENGTH_REG_r = rg_LANE3_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE8_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE8_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE8_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE8_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE8_LENGTH_REG_r = rg_LANE8_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE2_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE2_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE2_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE4_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE4_MATCH_COUNT_REG_r = rg_LANE4_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE7_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE7_SEQUENCE_REG_r = rg_LANE7_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE2_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE2_SEQUENCE_REG_r = rg_LANE2_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE8_LENGTH_REG
  always @ (*) begin
    reg_LANE8_LENGTH_REG_LENGTH_next = rg_LANE8_LENGTH_REG_LENGTH;
    l2h_LANE8_LENGTH_REG_LENGTH_r = rg_LANE8_LENGTH_REG_LENGTH;
    if (d2l_LANE8_LENGTH_REG_we) reg_LANE8_LENGTH_REG_LENGTH_next = ((d2l_LANE8_LENGTH_REG_w & d2l_LANE8_LENGTH_REG_w_enable) | (reg_LANE8_LENGTH_REG_LENGTH_next & ~d2l_LANE8_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE8_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE8_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE8_LENGTH_REG_LENGTH <= #1  reg_LANE8_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE_STATUS_REG
  always @ (*) begin
    rg_LANE_STATUS_REG_LANE0 =  h2l_LANE_STATUS_REG_LANE0_w;
    rg_LANE_STATUS_REG_LANE1 =  h2l_LANE_STATUS_REG_LANE1_w;
    rg_LANE_STATUS_REG_LANE2 =  h2l_LANE_STATUS_REG_LANE2_w;
    rg_LANE_STATUS_REG_LANE3 =  h2l_LANE_STATUS_REG_LANE3_w;
    rg_LANE_STATUS_REG_LANE4 =  h2l_LANE_STATUS_REG_LANE4_w;
    rg_LANE_STATUS_REG_LANE5 =  h2l_LANE_STATUS_REG_LANE5_w;
    rg_LANE_STATUS_REG_LANE6 =  h2l_LANE_STATUS_REG_LANE6_w;
    rg_LANE_STATUS_REG_LANE7 =  h2l_LANE_STATUS_REG_LANE7_w;
    rg_LANE_STATUS_REG_LANE8 =  h2l_LANE_STATUS_REG_LANE8_w;
    rg_LANE_STATUS_REG_LANE9 =  h2l_LANE_STATUS_REG_LANE9_w;
  end
  
  //------- combinatorial assigns for LANE9_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE9_LENGTH_REG_r = rg_LANE9_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE_CLEAR_REG
  always @ (*) begin
    reg_LANE_CLEAR_REG_LANE0_next = 0;
    l2h_LANE_CLEAR_REG_LANE0_r = rg_LANE_CLEAR_REG_LANE0;
    reg_LANE_CLEAR_REG_LANE1_next = 0;
    l2h_LANE_CLEAR_REG_LANE1_r = rg_LANE_CLEAR_REG_LANE1;
    reg_LANE_CLEAR_REG_LANE2_next = 0;
    l2h_LANE_CLEAR_REG_LANE2_r = rg_LANE_CLEAR_REG_LANE2;
    reg_LANE_CLEAR_REG_LANE3_next = 0;
    l2h_LANE_CLEAR_REG_LANE3_r = rg_LANE_CLEAR_REG_LANE3;
    reg_LANE_CLEAR_REG_LANE4_next = 0;
    l2h_LANE_CLEAR_REG_LANE4_r = rg_LANE_CLEAR_REG_LANE4;
    reg_LANE_CLEAR_REG_LANE5_next = 0;
    l2h_LANE_CLEAR_REG_LANE5_r = rg_LANE_CLEAR_REG_LANE5;
    reg_LANE_CLEAR_REG_LANE6_next = 0;
    l2h_LANE_CLEAR_REG_LANE6_r = rg_LANE_CLEAR_REG_LANE6;
    reg_LANE_CLEAR_REG_LANE7_next = 0;
    l2h_LANE_CLEAR_REG_LANE7_r = rg_LANE_CLEAR_REG_LANE7;
    reg_LANE_CLEAR_REG_LANE8_next = 0;
    l2h_LANE_CLEAR_REG_LANE8_r = rg_LANE_CLEAR_REG_LANE8;
    reg_LANE_CLEAR_REG_LANE9_next = 0;
    l2h_LANE_CLEAR_REG_LANE9_r = rg_LANE_CLEAR_REG_LANE9;
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE0_next = ((d2l_LANE_CLEAR_REG_w [0]  & d2l_LANE_CLEAR_REG_w_enable [0] ) | (reg_LANE_CLEAR_REG_LANE0_next & ~d2l_LANE_CLEAR_REG_w_enable [0] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE1_next = ((d2l_LANE_CLEAR_REG_w [1]  & d2l_LANE_CLEAR_REG_w_enable [1] ) | (reg_LANE_CLEAR_REG_LANE1_next & ~d2l_LANE_CLEAR_REG_w_enable [1] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE2_next = ((d2l_LANE_CLEAR_REG_w [2]  & d2l_LANE_CLEAR_REG_w_enable [2] ) | (reg_LANE_CLEAR_REG_LANE2_next & ~d2l_LANE_CLEAR_REG_w_enable [2] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE3_next = ((d2l_LANE_CLEAR_REG_w [3]  & d2l_LANE_CLEAR_REG_w_enable [3] ) | (reg_LANE_CLEAR_REG_LANE3_next & ~d2l_LANE_CLEAR_REG_w_enable [3] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE4_next = ((d2l_LANE_CLEAR_REG_w [4]  & d2l_LANE_CLEAR_REG_w_enable [4] ) | (reg_LANE_CLEAR_REG_LANE4_next & ~d2l_LANE_CLEAR_REG_w_enable [4] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE5_next = ((d2l_LANE_CLEAR_REG_w [5]  & d2l_LANE_CLEAR_REG_w_enable [5] ) | (reg_LANE_CLEAR_REG_LANE5_next & ~d2l_LANE_CLEAR_REG_w_enable [5] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE6_next = ((d2l_LANE_CLEAR_REG_w [6]  & d2l_LANE_CLEAR_REG_w_enable [6] ) | (reg_LANE_CLEAR_REG_LANE6_next & ~d2l_LANE_CLEAR_REG_w_enable [6] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE7_next = ((d2l_LANE_CLEAR_REG_w [7]  & d2l_LANE_CLEAR_REG_w_enable [7] ) | (reg_LANE_CLEAR_REG_LANE7_next & ~d2l_LANE_CLEAR_REG_w_enable [7] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE8_next = ((d2l_LANE_CLEAR_REG_w [8]  & d2l_LANE_CLEAR_REG_w_enable [8] ) | (reg_LANE_CLEAR_REG_LANE8_next & ~d2l_LANE_CLEAR_REG_w_enable [8] ));
    if (d2l_LANE_CLEAR_REG_we) reg_LANE_CLEAR_REG_LANE9_next = ((d2l_LANE_CLEAR_REG_w [9]  & d2l_LANE_CLEAR_REG_w_enable [9] ) | (reg_LANE_CLEAR_REG_LANE9_next & ~d2l_LANE_CLEAR_REG_w_enable [9] ));
  end
  
  //------- reg assigns for LANE_CLEAR_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE_CLEAR_REG_LANE0 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE1 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE2 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE3 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE4 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE5 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE6 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE7 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE8 <= #1 1'b0;
      rg_LANE_CLEAR_REG_LANE9 <= #1 1'b0;
    end
    else begin
      rg_LANE_CLEAR_REG_LANE0 <= #1  reg_LANE_CLEAR_REG_LANE0_next;
      rg_LANE_CLEAR_REG_LANE1 <= #1  reg_LANE_CLEAR_REG_LANE1_next;
      rg_LANE_CLEAR_REG_LANE2 <= #1  reg_LANE_CLEAR_REG_LANE2_next;
      rg_LANE_CLEAR_REG_LANE3 <= #1  reg_LANE_CLEAR_REG_LANE3_next;
      rg_LANE_CLEAR_REG_LANE4 <= #1  reg_LANE_CLEAR_REG_LANE4_next;
      rg_LANE_CLEAR_REG_LANE5 <= #1  reg_LANE_CLEAR_REG_LANE5_next;
      rg_LANE_CLEAR_REG_LANE6 <= #1  reg_LANE_CLEAR_REG_LANE6_next;
      rg_LANE_CLEAR_REG_LANE7 <= #1  reg_LANE_CLEAR_REG_LANE7_next;
      rg_LANE_CLEAR_REG_LANE8 <= #1  reg_LANE_CLEAR_REG_LANE8_next;
      rg_LANE_CLEAR_REG_LANE9 <= #1  reg_LANE_CLEAR_REG_LANE9_next;
    end
  end
  
  //------- combinatorial assigns for LANE5_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE5_SEQUENCE_REG_r = rg_LANE5_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE3_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE3_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE3_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE3_SEQUENCE_REG
  always @ (*) begin
    reg_LANE3_SEQUENCE_REG_SEQUENCE_next = rg_LANE3_SEQUENCE_REG_SEQUENCE;
    l2h_LANE3_SEQUENCE_REG_SEQUENCE_r = rg_LANE3_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE3_SEQUENCE_REG_we) reg_LANE3_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE3_SEQUENCE_REG_w & d2l_LANE3_SEQUENCE_REG_w_enable) | (reg_LANE3_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE3_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE3_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE3_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE3_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE3_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE0_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE0_LENGTH_REG_r = rg_LANE0_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE6_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE6_MATCH_COUNT_REG_r = rg_LANE6_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE7_SEQUENCE_REG
  always @ (*) begin
    reg_LANE7_SEQUENCE_REG_SEQUENCE_next = rg_LANE7_SEQUENCE_REG_SEQUENCE;
    l2h_LANE7_SEQUENCE_REG_SEQUENCE_r = rg_LANE7_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE7_SEQUENCE_REG_we) reg_LANE7_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE7_SEQUENCE_REG_w & d2l_LANE7_SEQUENCE_REG_w_enable) | (reg_LANE7_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE7_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE7_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE7_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE7_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE7_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE3_LENGTH_REG
  always @ (*) begin
    reg_LANE3_LENGTH_REG_LENGTH_next = rg_LANE3_LENGTH_REG_LENGTH;
    l2h_LANE3_LENGTH_REG_LENGTH_r = rg_LANE3_LENGTH_REG_LENGTH;
    if (d2l_LANE3_LENGTH_REG_we) reg_LANE3_LENGTH_REG_LENGTH_next = ((d2l_LANE3_LENGTH_REG_w & d2l_LANE3_LENGTH_REG_w_enable) | (reg_LANE3_LENGTH_REG_LENGTH_next & ~d2l_LANE3_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE3_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE3_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE3_LENGTH_REG_LENGTH <= #1  reg_LANE3_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE5_SEQUENCE_REG
  always @ (*) begin
    reg_LANE5_SEQUENCE_REG_SEQUENCE_next = rg_LANE5_SEQUENCE_REG_SEQUENCE;
    l2h_LANE5_SEQUENCE_REG_SEQUENCE_r = rg_LANE5_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE5_SEQUENCE_REG_we) reg_LANE5_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE5_SEQUENCE_REG_w & d2l_LANE5_SEQUENCE_REG_w_enable) | (reg_LANE5_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE5_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE5_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE5_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE5_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE5_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE3_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE3_MATCH_COUNT_REG_r = rg_LANE3_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE9_LENGTH_REG
  always @ (*) begin
    reg_LANE9_LENGTH_REG_LENGTH_next = rg_LANE9_LENGTH_REG_LENGTH;
    l2h_LANE9_LENGTH_REG_LENGTH_r = rg_LANE9_LENGTH_REG_LENGTH;
    if (d2l_LANE9_LENGTH_REG_we) reg_LANE9_LENGTH_REG_LENGTH_next = ((d2l_LANE9_LENGTH_REG_w & d2l_LANE9_LENGTH_REG_w_enable) | (reg_LANE9_LENGTH_REG_LENGTH_next & ~d2l_LANE9_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE9_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE9_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE9_LENGTH_REG_LENGTH <= #1  reg_LANE9_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE6_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE6_SEQUENCE_REG_r = rg_LANE6_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE4_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE4_SEQUENCE_REG_r = rg_LANE4_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE1_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE1_LENGTH_REG_r = rg_LANE1_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE9_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE9_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE9_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE_IE_REG (pio read data)
  always @ (*) begin
    l2d_LANE_IE_REG_r = 32'b0;
    l2d_LANE_IE_REG_r [0]  = rg_LANE_IE_REG_LANE0;
    l2d_LANE_IE_REG_r [1]  = rg_LANE_IE_REG_LANE1;
    l2d_LANE_IE_REG_r [2]  = rg_LANE_IE_REG_LANE2;
    l2d_LANE_IE_REG_r [3]  = rg_LANE_IE_REG_LANE3;
    l2d_LANE_IE_REG_r [4]  = rg_LANE_IE_REG_LANE4;
    l2d_LANE_IE_REG_r [5]  = rg_LANE_IE_REG_LANE5;
    l2d_LANE_IE_REG_r [6]  = rg_LANE_IE_REG_LANE6;
    l2d_LANE_IE_REG_r [7]  = rg_LANE_IE_REG_LANE7;
    l2d_LANE_IE_REG_r [8]  = rg_LANE_IE_REG_LANE8;
    l2d_LANE_IE_REG_r [9]  = rg_LANE_IE_REG_LANE9;
  end
  
  //------- combinatorial assigns for LANE_START_REG (pio read data)
  always @ (*) begin
    l2d_LANE_START_REG_r = 32'b0;
    l2d_LANE_START_REG_r [0]  = rg_LANE_START_REG_LANE0;
    l2d_LANE_START_REG_r [1]  = rg_LANE_START_REG_LANE1;
    l2d_LANE_START_REG_r [2]  = rg_LANE_START_REG_LANE2;
    l2d_LANE_START_REG_r [3]  = rg_LANE_START_REG_LANE3;
    l2d_LANE_START_REG_r [4]  = rg_LANE_START_REG_LANE4;
    l2d_LANE_START_REG_r [5]  = rg_LANE_START_REG_LANE5;
    l2d_LANE_START_REG_r [6]  = rg_LANE_START_REG_LANE6;
    l2d_LANE_START_REG_r [7]  = rg_LANE_START_REG_LANE7;
    l2d_LANE_START_REG_r [8]  = rg_LANE_START_REG_LANE8;
    l2d_LANE_START_REG_r [9]  = rg_LANE_START_REG_LANE9;
  end
  
  //------- combinatorial assigns for LANE0_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE0_MATCH_COUNT_REG_r = rg_LANE0_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE6_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE6_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE6_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE0_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE0_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE0_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE6_LENGTH_REG
  always @ (*) begin
    reg_LANE6_LENGTH_REG_LENGTH_next = rg_LANE6_LENGTH_REG_LENGTH;
    l2h_LANE6_LENGTH_REG_LENGTH_r = rg_LANE6_LENGTH_REG_LENGTH;
    if (d2l_LANE6_LENGTH_REG_we) reg_LANE6_LENGTH_REG_LENGTH_next = ((d2l_LANE6_LENGTH_REG_w & d2l_LANE6_LENGTH_REG_w_enable) | (reg_LANE6_LENGTH_REG_LENGTH_next & ~d2l_LANE6_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE6_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE6_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE6_LENGTH_REG_LENGTH <= #1  reg_LANE6_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE1_SEQUENCE_REG
  always @ (*) begin
    reg_LANE1_SEQUENCE_REG_SEQUENCE_next = rg_LANE1_SEQUENCE_REG_SEQUENCE;
    l2h_LANE1_SEQUENCE_REG_SEQUENCE_r = rg_LANE1_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE1_SEQUENCE_REG_we) reg_LANE1_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE1_SEQUENCE_REG_w & d2l_LANE1_SEQUENCE_REG_w_enable) | (reg_LANE1_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE1_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE1_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE1_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE1_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE1_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE3_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE3_SEQUENCE_REG_r = rg_LANE3_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE7_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE7_LENGTH_REG_r = rg_LANE7_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE2_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE2_MATCH_COUNT_REG_r = rg_LANE2_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
  //------- combinatorial assigns for LANE8_SEQUENCE_REG (pio read data)
  always @ (*) begin
    l2d_LANE8_SEQUENCE_REG_r = rg_LANE8_SEQUENCE_REG_SEQUENCE;
  end
  
  //------- combinatorial assigns for LANE2_LENGTH_REG (pio read data)
  always @ (*) begin
    l2d_LANE2_LENGTH_REG_r = rg_LANE2_LENGTH_REG_LENGTH;
  end
  
  //------- combinatorial assigns for LANE4_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE4_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE4_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE5_LENGTH_REG
  always @ (*) begin
    reg_LANE5_LENGTH_REG_LENGTH_next = rg_LANE5_LENGTH_REG_LENGTH;
    l2h_LANE5_LENGTH_REG_LENGTH_r = rg_LANE5_LENGTH_REG_LENGTH;
    if (d2l_LANE5_LENGTH_REG_we) reg_LANE5_LENGTH_REG_LENGTH_next = ((d2l_LANE5_LENGTH_REG_w & d2l_LANE5_LENGTH_REG_w_enable) | (reg_LANE5_LENGTH_REG_LENGTH_next & ~d2l_LANE5_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE5_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE5_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE5_LENGTH_REG_LENGTH <= #1  reg_LANE5_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE1_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE1_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE1_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE7_MATCH_COUNT_REG
  always @ (*) begin
    rg_LANE7_MATCH_COUNT_REG_MATCH_COUNT =  h2l_LANE7_MATCH_COUNT_REG_MATCH_COUNT_w;
  end
  
  //------- combinatorial assigns for LANE9_SEQUENCE_REG
  always @ (*) begin
    reg_LANE9_SEQUENCE_REG_SEQUENCE_next = rg_LANE9_SEQUENCE_REG_SEQUENCE;
    l2h_LANE9_SEQUENCE_REG_SEQUENCE_r = rg_LANE9_SEQUENCE_REG_SEQUENCE;
    if (d2l_LANE9_SEQUENCE_REG_we) reg_LANE9_SEQUENCE_REG_SEQUENCE_next = ((d2l_LANE9_SEQUENCE_REG_w & d2l_LANE9_SEQUENCE_REG_w_enable) | (reg_LANE9_SEQUENCE_REG_SEQUENCE_next & ~d2l_LANE9_SEQUENCE_REG_w_enable));
  end
  
  //------- reg assigns for LANE9_SEQUENCE_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE9_SEQUENCE_REG_SEQUENCE <= #1 32'h0;
    end
    else begin
      rg_LANE9_SEQUENCE_REG_SEQUENCE <= #1  reg_LANE9_SEQUENCE_REG_SEQUENCE_next;
    end
  end
  
  //------- combinatorial assigns for LANE4_LENGTH_REG
  always @ (*) begin
    reg_LANE4_LENGTH_REG_LENGTH_next = rg_LANE4_LENGTH_REG_LENGTH;
    l2h_LANE4_LENGTH_REG_LENGTH_r = rg_LANE4_LENGTH_REG_LENGTH;
    if (d2l_LANE4_LENGTH_REG_we) reg_LANE4_LENGTH_REG_LENGTH_next = ((d2l_LANE4_LENGTH_REG_w & d2l_LANE4_LENGTH_REG_w_enable) | (reg_LANE4_LENGTH_REG_LENGTH_next & ~d2l_LANE4_LENGTH_REG_w_enable));
  end
  
  //------- reg assigns for LANE4_LENGTH_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_LANE4_LENGTH_REG_LENGTH <= #1 32'h0;
    end
    else begin
      rg_LANE4_LENGTH_REG_LENGTH <= #1  reg_LANE4_LENGTH_REG_LENGTH_next;
    end
  end
  
  //------- combinatorial assigns for LANE_INT_STATUS_REG
  always @ (*) begin
    rg_LANE_INT_STATUS_REG_LANE0 =  h2l_LANE_INT_STATUS_REG_LANE0_w;
    rg_LANE_INT_STATUS_REG_LANE1 =  h2l_LANE_INT_STATUS_REG_LANE1_w;
    rg_LANE_INT_STATUS_REG_LANE2 =  h2l_LANE_INT_STATUS_REG_LANE2_w;
    rg_LANE_INT_STATUS_REG_LANE3 =  h2l_LANE_INT_STATUS_REG_LANE3_w;
    rg_LANE_INT_STATUS_REG_LANE4 =  h2l_LANE_INT_STATUS_REG_LANE4_w;
    rg_LANE_INT_STATUS_REG_LANE5 =  h2l_LANE_INT_STATUS_REG_LANE5_w;
    rg_LANE_INT_STATUS_REG_LANE6 =  h2l_LANE_INT_STATUS_REG_LANE6_w;
    rg_LANE_INT_STATUS_REG_LANE7 =  h2l_LANE_INT_STATUS_REG_LANE7_w;
    rg_LANE_INT_STATUS_REG_LANE8 =  h2l_LANE_INT_STATUS_REG_LANE8_w;
    rg_LANE_INT_STATUS_REG_LANE9 =  h2l_LANE_INT_STATUS_REG_LANE9_w;
  end
  
  //------- combinatorial assigns for LANE9_MATCH_COUNT_REG (pio read data)
  always @ (*) begin
    l2d_LANE9_MATCH_COUNT_REG_r = rg_LANE9_MATCH_COUNT_REG_MATCH_COUNT;
  end
  
endmodule

