// Garnet SoC top level with pads
//; use POSIX;
//; my $io_list = $self->force_param(IO_LIST =>
//;  [
//;   {name => 'TLX_FWD_CLK',               width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_PAYLOAD_TVALID',    width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_PAYLOAD_TREADY',    width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_PAYLOAD_TDATA_HI',  width => 24,  direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_FLOW_TVALID',       width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_FLOW_TREADY',       width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'TLX_FWD_FLOW_TDATA',        width => 2,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'DP_JTAG_TCK',               width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'DP_JTAG_TDI',               width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'DP_JTAG_TMS',               width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'DP_JTAG_TRSTn',             width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'DP_JTAG_TDO',               width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'CGRA_JTAG_TCK',             width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'CGRA_JTAG_TDI',             width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'CGRA_JTAG_TMS',             width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'CGRA_JTAG_TRSTn',           width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'CGRA_JTAG_TDO',             width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'MASTER_CLK',                width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'PORESETn',                  width => 1,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'LOOP_BACK',                 width => 1,   direction => 'output',  pad => 'digital', side => 'left'},
//;   {name => 'LOOP_BACK_SELECT',          width => 4,   direction => 'input',   pad => 'digital', side => 'left'},
//;   {name => 'TLX_REV_CLK',               width => 1,   direction => 'input',   pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_PAYLOAD_TVALID',    width => 1,   direction => 'input',   pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_PAYLOAD_TREADY',    width => 1,   direction => 'output',  pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_PAYLOAD_TDATA_LO',  width => 45,  direction => 'input',   pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_FLOW_TVALID',       width => 1,   direction => 'input',   pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_FLOW_TREADY',       width => 1,   direction => 'output',  pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_FLOW_TDATA',        width => 3,   direction => 'input',   pad => 'digital', side => 'right'},
//;   {name => 'TLX_REV_PAYLOAD_TDATA_HI',  width => 35,  direction => 'input',   pad => 'digital', side => 'bottom'},
//;   {name => 'TLX_FWD_PAYLOAD_TDATA_LO',  width => 16,  direction => 'output',  pad => 'digital', side => 'bottom'},
//;   {name => 'TPIU_TRACE_DATA',           width => 4,   direction => 'output',  pad => 'digital', side => 'bottom'},
//;   {name => 'TPIU_TRACE_SWO',            width => 1,   direction => 'output',  pad => 'digital', side => 'bottom'},
//;   {name => 'TPIU_TRACE_CLK',            width => 1,   direction => 'output',  pad => 'digital', side => 'bottom'},
//;   {name => 'UART0_RXD',                 width => 1,   direction => 'input',   pad => 'digital', side => 'bottom'},
//;   {name => 'UART0_TXD',                 width => 1,   direction => 'output',  pad => 'digital', side => 'bottom'},
//;   {name => 'UART1_RXD',                 width => 1,   direction => 'input',   pad => 'digital', side => 'bottom'},
//;   {name => 'UART1_TXD',                 width => 1,   direction => 'output',  pad => 'digital', side => 'bottom'}
//;  ]);
//; my $num_ios = scalar(@{$io_list});
//; my $num_vdd_per_side = 2;
//; my $num_vddpst_per_side = 6;
//; my @vddpst_offsets = (1138, 2014, 2184, 2706, 2879, 3745);
//; #
//; # 01/2020 steveri: had to shift bottom-left VDD pad
//; # 100u closer to corner, to accommodate ICOVL alignment cells,
//; # see https://github.com/StanfordAHA/garnet/issues/395
//; my @vdd_offsets        = (450, 4430);
//; my @vdd_offsets_bottom = (350, 4430);
//; my $pad_width = 33.024;
//; my $print_offset = 1;
//; my $include_core = parameter(Name=>'include_core', val=>1, doc=>'include soc core or pads only');

//; my $dragonphy_ios = $self->force_param(DRAGONPHY_IO_LIST =>
//;  [
//;  ]);

//; ########################################################################
//; # MANUALLY-ADJUSTED PAD OFFSETS
//; #
//; # 01/2020 steveri: had to add new offset 4666 for top_rte_dom3
//; # b/c it was overlapping with top_VDD_dom3 at 4500
//; # see https://github.com/StanfordAHA/garnet/issues/399
//; #
//; # 10/2020 steveri: freezing location of top row pads to same
//; # as 05/2020 tapeout attempt, so PHY people can reuse same RDL
//; #
//; # 10/2020 steveri: changed offset of 'IOPAD_top_VDDPST_dom3'
//; # (4200=>3888) for better layout. I don't think the PHY guys
//; # use this pad so change should be okay maybe
//; #
//; my %pad_offset;
//; #
//; # same as 05/2020 tapeout
//; $pad_offset{'ANAIOPAD_ext_clk_async_n'    } = 1360.000;
//; $pad_offset{'ANAIOPAD_ext_clk_async_p'    } = 1408.901;
//; $pad_offset{'IOPAD_top_cut_1'             } = 1457.802;
//; $pad_offset{'ANAIOPAD_ext_clkn'           } = 1532.287;
//; $pad_offset{'ANAIOPAD_ext_clkp'           } = 1581.188;
//; $pad_offset{'ANAIOPAD_CVDD'               } = 1630.088;
//; $pad_offset{'ANAIOPAD_CVSS'               } = 1730.444;
//; $pad_offset{'IOPAD_top_cut_2'             } = 1830.801;
//; $pad_offset{'ANAIOPAD_AVDD'               } = 1905.286;
//; $pad_offset{'ANAIOPAD_AVSS'               } = 2005.643;
//; $pad_offset{'ANAIOPAD_ext_Vcm'            } = 2106.000;
//; $pad_offset{'ANAIOPAD_ext_Vcal'           } = 2301.488;
//; $pad_offset{'IOPAD_top_cut_3'             } = 2496.976;
//; $pad_offset{'ANAIOPAD_ext_clk_test0_n'    } = 2718.048;
//; $pad_offset{'ANAIOPAD_ext_clk_test0_p'    } = 2913.536;
//; $pad_offset{'ANAIOPAD_ext_clk_test1_p'    } = 3109.024;
//; $pad_offset{'ANAIOPAD_ext_clk_test1_n'    } = 3304.512;
//; $pad_offset{'IOPAD_jtag_intf_i_phy_tck'   } = 3500.000;
//; $pad_offset{'IOPAD_jtag_intf_i_phy_tdi'   } = 3533.334;
//; $pad_offset{'IOPAD_jtag_intf_i_phy_tdo'   } = 3566.667;
//; $pad_offset{'IOPAD_jtag_intf_i_phy_tms'   } = 3600.000;
//; $pad_offset{'IOPAD_jtag_intf_i_phy_trst_n'} = 3633.333;   
//; $pad_offset{'IOPAD_ext_rstb'              } = 3666.666;
//; $pad_offset{'IOPAD_ext_dump_start'        } = 3700.000;
//; $pad_offset{'IOPAD_top_VDD_dom3'          } = 4500.000;
//; $pad_offset{'IOPAD_top_rte_dom3'          } = 4666.000;
//; #
//; # CHANGED for 12/2020 tapeout
//; $pad_offset{'IOPAD_top_VDDPST_dom3'       } = 3888.000; # (was 4200)
//; #
//; # NEW for 12/2020 tapeout
//; $pad_offset{'IOPAD_freq_lvl_cross'        } = 4006.000;   
//; $pad_offset{'IOPAD_ramp_clock'            } = 4160.000;

module `mname` (
//; my $mcnt = 0;
//; foreach my $io (@{$dragonphy_ios}) {
//;   if($io->{type} eq "digital") {
    `$io->{direction}` pad_`$io->{name}`,
//;   }
//; }
//; foreach my $io (@{$io_list}) {
//;   ++$mcnt;
//;   if ($mcnt < $num_ios) {
    `$io->{direction}` [`$io->{width}-1`:0] pad_`$io->{name}`,
//;   } else {
    `$io->{direction}` [`$io->{width}-1`:0] pad_`$io->{name}`
//;   }
//; }
);

// Now create wires that will connect from pads to core module
//; foreach my $io (@{$io_list}) {
//;   if ($io->{direction} eq "inout") {
  wire `$io->{io_ctrl}`;
  wire `$io->{inport}`;
  wire `$io->{outport}`;
//;   } else {
  wire [`$io->{width}-1`:0] `$io->{name}`_int;
//;   }
//; }
  wire rte;
  wire [2:0] out_pad_ds_grp0;
  wire [2:0] out_pad_ds_grp1;
  wire [2:0] out_pad_ds_grp2;
  wire [2:0] out_pad_ds_grp3;
  wire [2:0] out_pad_ds_grp4;
  wire [2:0] out_pad_ds_grp5;
  wire [2:0] out_pad_ds_grp6;
  wire [2:0] out_pad_ds_grp7;

  wire out_pad_ds0 = out_pad_ds_grp0[0];
  wire out_pad_ds1 = out_pad_ds_grp0[1];
  wire out_pad_ds2 = out_pad_ds_grp0[2];

  wire ALT_MASTER_CLK;

  // RTE stuff
  IN12LP_GPIO18_13M9S30P_PWRDET_TIE_V    IOPAD_bottom_RTE_DIG(.RETCIN(1'b0), .RETCOUT(rte));
  IN13LP_GPIO18_13M9S30P_PWRDET_TIE_V    IOPAD_top_RTE_DIG (.RETCIN(1'b0), .RETCOUT(rte));
  IN12LP_GPIO18_13M9S30P_PWRDET_TIE_H    IOPAD_left_RTE_DIG(.RETCIN(1'b0), .RETCOUT(rte));
  IN12LP_GPIO18_13M9S30P_PWRDET_TIE_H    IOPAD_right_RTE_DIG(.RETCIN(1'b0), .RETCOUT(rte));



//; my @top_pads = ();
//; my @bottom_pads = ();
//; my @left_pads = ();
//; my @right_pads = ();

//; my %pads = ( top => @top_pads,
//;              bottom => @bottom_pads,
//;              left => @left_pads,
//;              right => @right_pads);


// Now instantiate all pads
//; foreach my $io (@{$io_list}) {
//;   my $orient = "";
//;   my $side = $io->{side};
//;   if(($side eq "top") or ($side eq "bottom")) {
//;     $orient = "V";
//;   } else {
//;     $orient = "H";
//;   }
//;   for (my $i = 0; $i < $io->{width}; $i++) {
//;     my $pad_name = "IOPAD_${side}_$io->{name}_${i}";
//;     if($side eq "top") {
//;       push @top_pads, $pad_name;
//;     }
//;     elsif($side eq "bottom") {
//;        push @bottom_pads, $pad_name;
//;     }
//;     elsif($side eq "left") {
//;       push @left_pads, $pad_name;
//;     }
//;     elsif($side eq "right") {
//;       push @right_pads, $pad_name;
//;     }
  IN12LP_GPIO18_13M9S30P_IO_`$orient` `$pad_name` (
    .PAD(pad_`$io->{name}`[`$i`]),
//;     if ($io->{direction} eq "inout") {
    .Y(`$io->{inport}`),
    .DATA(`$io->{outport}`),
    .IE(~`$io->{io_ctrl}`),
    .OEN(~`$io->{io_ctrl}`),
//;     }
//;     elsif ($io->{direction} eq "input") {
    .Y(`$io->{name}`_int[`$i`]),
    .DATA(1'b0),
    .RXEN(1'b1),
    .TRIEN(1'b1),
//;     } else {
    .DATA(`$io->{name}`_int[`$i`]),
    .RXEN(1'b0),
    .TRIEN(1'b0),
//;     }
    .DRV(out_pad_ds_grp0[1:0]),
    .PUEN(1'b0),
    .PDEN(1'b0),
    .RETC(1'b0)
  );
//;   }
//; }

//; my $num_pads_left = scalar(@left_pads) + $num_vddpst_per_side + $num_vdd_per_side;
//; my $num_pads_right = scalar(@right_pads) + $num_vddpst_per_side + $num_vdd_per_side;
//; my $num_pads_top = scalar(@top_pads) + $num_vddpst_per_side + $num_vdd_per_side;
//; my $num_pads_bottom = scalar(@bottom_pads) + $num_vddpst_per_side + $num_vdd_per_side;
//; if ($include_core) {
AhaGarnetSoC core (
  .OUT_PAD_DS_GRP0(out_pad_ds_grp0),
  .OUT_PAD_DS_GRP1(out_pad_ds_grp1),
  .OUT_PAD_DS_GRP2(out_pad_ds_grp2),
  .OUT_PAD_DS_GRP3(out_pad_ds_grp3),
  .OUT_PAD_DS_GRP4(out_pad_ds_grp4),
  .OUT_PAD_DS_GRP5(out_pad_ds_grp5),
  .OUT_PAD_DS_GRP6(out_pad_ds_grp6),
  .OUT_PAD_DS_GRP7(out_pad_ds_grp7),

// Connect this to a clock generated by dragonphy
  .ALT_MASTER_CLK(ALT_MASTER_CLK),

//; my $cnt = 0;
//; foreach my $io (@{$io_list}) {
//;   # prevent comma on last port
//;   ++$cnt;
//;   if ($cnt < $num_ios) {
//;     if ($io->{direction} eq "inout") {
  .`$io->{io_ctrl}`(`$io->{io_ctrl}`),
  .`$io->{outport}`(`$io->{outport}`),
  .`$io->{inport}`(`$io->{inport}`),
//;     } else {
  .`$io->{name}`(`$io->{name}`_int),
//;     }
//;   } else {
//;     if ($io->{direction} eq "inout") {
  .`$io->{io_ctrl}`(`$io->{io_ctrl}`)
  .`$io->{outport}`(`$io->{outport}`)
  .`$io->{inport}`(`$io->{inport}`)
//;     } else {
  .`$io->{name}`(`$io->{name}`_int)
//;     }
//;   }
//; }
);
//; }

//; my @sides = ('top', 'bottom', 'left', 'right');
//; foreach my $side (@sides) {
//;   my $orient = "";
//;   if(($side eq "top") or ($side eq "bottom")) {
//;     $orient = "V";
//;   } else {
//;     $orient = "H";
//;   }
//;   for (my $i = 0; $i < $num_vddpst_per_side; $i++) {
//;     my $pad_name = "IOPAD_${side}_VDDPST_${i}";
//;     my $offset;
  IN12LP_GPIO18_13M9S30P_VDDIO_`$orient` `$pad_name` (.RETC(rte));
//;     if($side eq "top") {
//;       my $num_pads = $num_pads_top;
//;       $offset = $vddpst_offsets[$i];
//;       my $index = floor(($offset-500) / (4000 / $num_pads));
//;       splice @top_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "bottom") {
//;       my $num_pads = $num_pads_bottom;
//;       $offset = $vddpst_offsets[$i];
//;       my $index = floor(($offset-500) / (4000 / $num_pads));
//;       splice @bottom_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "left") {
//;       my $num_pads = $num_pads_left;
//;       $offset = $vddpst_offsets[$i];
//;       my $index = floor(($offset-500) / (4000 / $num_pads));
//;       splice @left_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "right") {
//;       my $num_pads = $num_pads_right;
//;       $offset = $vddpst_offsets[$i];
//;       my $index = floor(($offset-500) / (4000 / $num_pads));
//;       splice @right_pads, $index, 0, $pad_name;
//;     }
//;     $pad_offset{$pad_name} = $offset;
//;   }
//;   for (my $i = 0; $i < $num_vdd_per_side; $i++) {
//;     my $pad_name = "IOPAD_${side}_VDD_${i}";
//;     my $offset;
  IN12LP_GPIO18_13M9S30P_VDDC_`$orient` `$pad_name` (.RETC(rte));
//;     if($side eq "top") {
//;       my $num_pads = $num_pads_top;
//;       $offset = $vdd_offsets[$i];
//;       #my $index = ceil($offset / (5000 / $num_pads));
//;       my $index = ($offset > 2500) ? $num_pads - 1 : 0;
//;       splice @top_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "bottom") {
//;       my $num_pads = $num_pads_bottom;
//;       $offset = $vdd_offsets_bottom[$i];
//;       #my $index = ceil($offset / (5000 / $num_pads));
//;       my $index = ($offset > 2500) ? $num_pads - 1 : 0;
//;       splice @bottom_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "left") {
//;       my $num_pads = $num_pads_left;
//;       $offset = $vdd_offsets[$i];
//;       #my $index = ceil($offset / (5000 / $num_pads));
//;       my $index = ($offset > 2500) ? $num_pads - 1 : 0;
//;       splice @left_pads, $index, 0, $pad_name;
//;     }
//;     elsif($side eq "right") {
//;       my $num_pads = $num_pads_right;
//;       $offset = $vdd_offsets[$i];
//;       #my $index = ceil($offset / (5000 / $num_pads));
//;       my $index = ($offset > 2500) ? $num_pads - 1 : 0;
//;       splice @right_pads, $index, 0, $pad_name;
//;     }
//;     $pad_offset{$pad_name} = $offset;
//;   }
//; }


//; my $current_domain = 0;
  wire rte_3;

//; foreach my $io (@{$dragonphy_ios}) {
//;   my $pad_domain = $io->{domain};
//; #if next pad is in new domain, insert a breaker cell
//;   if($pad_domain != $current_domain) {
//;     $current_domain = $pad_domain;
//;     my $cut_cell_name = "IOPAD_top_cut_${pad_domain}";
//;     push(@top_pads, $cut_cell_name);
  IN12LP_GPIO18_13M9S30P_FULLBRK_V `$cut_cell_name`();
//;   }
//;   my $pad_type = $io->{pad};
//;   my $signal_name = $io->{name};
//;   my $io_type = $io->{type};
//;   my $pad_name = "";
//;   if($io->{is_power} == 0) {
   wire `$signal_name`;
//;   }
//;   if($io_type eq "digital") {
//;     $pad_name = "IOPAD_${signal_name}";
//;   } else {
//;     $pad_name = "ANAIOPAD_${signal_name}";
//;   }
//;   if ($io->{pad} ne "NONE") {
//;   push(@top_pads, $pad_name);
  `$pad_type` `$pad_name` (
//; if($pad_type eq "PDB2ANA_V") {
    .RTE(rte_`$pad_domain`)
//; } elsif($pad_type eq "PDDWUWSWCDG_V"){
    .RTE(rte_`$pad_domain`),
//; }
//; if($io_type eq "digital") {
    .PAD(pad_`$signal_name`),
//;   if($io->{direction} eq "input") {
    .C(`$signal_name`),
    .I(1'b0),
    .IE(1'b1),
    .OEN(1'b1),
//;   } else {
    .I(`$signal_name`),
    .IE(1'b0),
    .OEN(1'b0),
//;   }
    .DS0(1'b0),
    .DS1(1'b0),
    .DS2(1'b0),
    .DS3(1'b0),
    .PE(1'b0),
    .PS(1'b0),
    .ST(1'b0)
//; }
  );

//;   }

//; }

//;  my $cnt = 0;
//; if ($include_core) {
  // No phy on Onyx but leaving this as placeholder for Kavya's block
  /*
  dragonphy_top iphy (
//; foreach my $io (@{$dragonphy_ios}) {
//;   if($io->{is_power} == 0) {
//;     ++$cnt;
    .`$io->{name}`(`$io->{name}`),
//;   }
//; }
    .clk_cgra(ALT_MASTER_CLK)
  );
  */
  // No ALT_MASTER_CLK for Onyx but tying to 0 for now
  assign ALT_MASTER_CLK = 1'b0;
//; }


endmodule

//; use strict;
//; use warnings;
//; # Now print out io_file
//; my $filename = "io_file";
//; open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
//; print $fh "(globals\n	version = 3\n	io_order = default\n)\n(iopad\n";
//; print $fh "	(top\n";
//; # Iterate over each side's pads
//; sub printpad {
//;   my $fh = shift; my $pad=shift;
//;   if (exists $pad_offset{$pad}) {
//;     print $fh "		(inst name=\"$pad\" offset=$pad_offset{$pad})\n";
//;   } else {
//;     print $fh "		(inst name=\"$pad\")\n";
//;   }
//; }
//; foreach my $pad (@top_pads) {
//;   printpad($fh, $pad)
//; }
//; print $fh "		(inst name=\"IOPAD_top_RTE_DIG\")\n";
//; print $fh "	)\n";

//; print $fh "	(bottom\n";
//; foreach my $pad (@bottom_pads) {
//;   printpad($fh, $pad)
//; }
//; # rte
//; print $fh "		(inst name=\"IOPAD_bottom_RTE_DIG\")\n";
//; print $fh "	)\n";

//; print $fh "	(left\n";
//; foreach my $pad (@left_pads) {
//;   printpad($fh, $pad)
//; }
//; # rte
//; print $fh "		(inst name=\"IOPAD_left_RTE_DIG\")\n";
//; print $fh "	)\n";

//; print $fh "	(right\n";
//; foreach my $pad (@right_pads) {
//;   printpad($fh, $pad)
//; }
//; # rte
//; print $fh "		(inst name=\"IOPAD_right_RTE_DIG\")\n";
//; print $fh "	)\n";

//; #Now handle corner cells, which will be added in PD flow
//; print $fh "	(topleft\n";
//; print $fh "		(inst name=\"corner_ul\" orientation=MX)\n";
//; print $fh "	)\n";
//; print $fh "	(topright\n";
//; print $fh "		(inst name=\"corner_ur\" orientation=R180)\n";
//; print $fh "	)\n";
//; print $fh "	(bottomleft\n";
//; print $fh "		(inst name=\"corner_ll\")\n";
//; print $fh "	)\n";
//; print $fh "	(bottomright\n";
//; print $fh "		(inst name=\"corner_lr\" orientation=MY)\n";
//; print $fh "	)\n";

//; print $fh ")\n";

//; close $fh;
