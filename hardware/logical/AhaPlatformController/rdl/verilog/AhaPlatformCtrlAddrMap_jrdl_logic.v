//   Ordt 190617.01 autogenerated file 
//   Input: platform_ctrl.rdl
//   Parms: ./ordt/params.txt
//   Date: Tue May 05 01:27:47 PDT 2020
//

//
//---------- module AhaPlatformCtrlAddrMap_jrdl_logic
//
module AhaPlatformCtrlAddrMap_jrdl_logic
(
  clk,
  reset,
  d2l_ID_REG_w,
  d2l_ID_REG_w_enable,
  d2l_ID_REG_we,
  d2l_ID_REG_re,
  d2l_PAD_STRENGTH_CTRL_REG_w,
  d2l_PAD_STRENGTH_CTRL_REG_w_enable,
  d2l_PAD_STRENGTH_CTRL_REG_we,
  d2l_PAD_STRENGTH_CTRL_REG_re,
  d2l_SYS_CLK_SELECT_REG_w,
  d2l_SYS_CLK_SELECT_REG_w_enable,
  d2l_SYS_CLK_SELECT_REG_we,
  d2l_SYS_CLK_SELECT_REG_re,
  d2l_DMA0_PCLK_SELECT_REG_w,
  d2l_DMA0_PCLK_SELECT_REG_w_enable,
  d2l_DMA0_PCLK_SELECT_REG_we,
  d2l_DMA0_PCLK_SELECT_REG_re,
  d2l_DMA1_PCLK_SELECT_REG_w,
  d2l_DMA1_PCLK_SELECT_REG_w_enable,
  d2l_DMA1_PCLK_SELECT_REG_we,
  d2l_DMA1_PCLK_SELECT_REG_re,
  d2l_TLX_FWD_CLK_SELECT_REG_w,
  d2l_TLX_FWD_CLK_SELECT_REG_w_enable,
  d2l_TLX_FWD_CLK_SELECT_REG_we,
  d2l_TLX_FWD_CLK_SELECT_REG_re,
  d2l_CGRA_CLK_SELECT_REG_w,
  d2l_CGRA_CLK_SELECT_REG_w_enable,
  d2l_CGRA_CLK_SELECT_REG_we,
  d2l_CGRA_CLK_SELECT_REG_re,
  d2l_TIMER0_CLK_SELECT_REG_w,
  d2l_TIMER0_CLK_SELECT_REG_w_enable,
  d2l_TIMER0_CLK_SELECT_REG_we,
  d2l_TIMER0_CLK_SELECT_REG_re,
  d2l_TIMER1_CLK_SELECT_REG_w,
  d2l_TIMER1_CLK_SELECT_REG_w_enable,
  d2l_TIMER1_CLK_SELECT_REG_we,
  d2l_TIMER1_CLK_SELECT_REG_re,
  d2l_UART0_CLK_SELECT_REG_w,
  d2l_UART0_CLK_SELECT_REG_w_enable,
  d2l_UART0_CLK_SELECT_REG_we,
  d2l_UART0_CLK_SELECT_REG_re,
  d2l_UART1_CLK_SELECT_REG_w,
  d2l_UART1_CLK_SELECT_REG_w_enable,
  d2l_UART1_CLK_SELECT_REG_we,
  d2l_UART1_CLK_SELECT_REG_re,
  d2l_WDOG_CLK_SELECT_REG_w,
  d2l_WDOG_CLK_SELECT_REG_w_enable,
  d2l_WDOG_CLK_SELECT_REG_we,
  d2l_WDOG_CLK_SELECT_REG_re,
  d2l_CLK_GATE_EN_REG_w,
  d2l_CLK_GATE_EN_REG_w_enable,
  d2l_CLK_GATE_EN_REG_we,
  d2l_CLK_GATE_EN_REG_re,
  d2l_SYS_RESET_PROP_REG_w,
  d2l_SYS_RESET_PROP_REG_w_enable,
  d2l_SYS_RESET_PROP_REG_we,
  d2l_SYS_RESET_PROP_REG_re,
  d2l_RESET_REQ_REG_w,
  d2l_RESET_REQ_REG_w_enable,
  d2l_RESET_REQ_REG_we,
  d2l_RESET_REQ_REG_re,
  d2l_RESET_ACK_REG_w,
  d2l_RESET_ACK_REG_w_enable,
  d2l_RESET_ACK_REG_we,
  d2l_RESET_ACK_REG_re,
  d2l_SYS_TICK_CONFIG_REG_w,
  d2l_SYS_TICK_CONFIG_REG_w_enable,
  d2l_SYS_TICK_CONFIG_REG_we,
  d2l_SYS_TICK_CONFIG_REG_re,
  d2l_SYS_RESET_AGGR_REG_w,
  d2l_SYS_RESET_AGGR_REG_w_enable,
  d2l_SYS_RESET_AGGR_REG_we,
  d2l_SYS_RESET_AGGR_REG_re,
  h2l_RESET_ACK_REG_DMA0_w,
  h2l_RESET_ACK_REG_DMA1_w,
  h2l_RESET_ACK_REG_TLX_FWD_w,
  h2l_RESET_ACK_REG_TLX_REV_w,
  h2l_RESET_ACK_REG_GGRA_w,
  h2l_RESET_ACK_REG_NIC_w,
  h2l_RESET_ACK_REG_TIMER0_w,
  h2l_RESET_ACK_REG_TIMER1_w,
  h2l_RESET_ACK_REG_UART0_w,
  h2l_RESET_ACK_REG_UART1_w,
  h2l_RESET_ACK_REG_WDOG_w,

  l2d_ID_REG_r,
  l2d_PAD_STRENGTH_CTRL_REG_r,
  l2d_SYS_CLK_SELECT_REG_r,
  l2d_DMA0_PCLK_SELECT_REG_r,
  l2d_DMA1_PCLK_SELECT_REG_r,
  l2d_TLX_FWD_CLK_SELECT_REG_r,
  l2d_CGRA_CLK_SELECT_REG_r,
  l2d_TIMER0_CLK_SELECT_REG_r,
  l2d_TIMER1_CLK_SELECT_REG_r,
  l2d_UART0_CLK_SELECT_REG_r,
  l2d_UART1_CLK_SELECT_REG_r,
  l2d_WDOG_CLK_SELECT_REG_r,
  l2d_CLK_GATE_EN_REG_r,
  l2d_SYS_RESET_PROP_REG_r,
  l2d_RESET_REQ_REG_r,
  l2d_RESET_ACK_REG_r,
  l2d_SYS_TICK_CONFIG_REG_r,
  l2d_SYS_RESET_AGGR_REG_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP0_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP1_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP2_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP3_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP4_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP5_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP6_r,
  l2h_PAD_STRENGTH_CTRL_REG_GRP7_r,
  l2h_SYS_CLK_SELECT_REG_SELECT_swmod_o,
  l2h_SYS_CLK_SELECT_REG_SELECT_r,
  l2h_DMA0_PCLK_SELECT_REG_SELECT_r,
  l2h_DMA1_PCLK_SELECT_REG_SELECT_r,
  l2h_TLX_FWD_CLK_SELECT_REG_SELECT_r,
  l2h_CGRA_CLK_SELECT_REG_SELECT_r,
  l2h_TIMER0_CLK_SELECT_REG_SELECT_r,
  l2h_TIMER1_CLK_SELECT_REG_SELECT_r,
  l2h_UART0_CLK_SELECT_REG_SELECT_r,
  l2h_UART1_CLK_SELECT_REG_SELECT_r,
  l2h_WDOG_CLK_SELECT_REG_SELECT_r,
  l2h_CLK_GATE_EN_REG_CPU_r,
  l2h_CLK_GATE_EN_REG_DAP_r,
  l2h_CLK_GATE_EN_REG_DMA0_r,
  l2h_CLK_GATE_EN_REG_DMA1_r,
  l2h_CLK_GATE_EN_REG_SRAMx_r,
  l2h_CLK_GATE_EN_REG_TLX_FWD_r,
  l2h_CLK_GATE_EN_REG_GGRA_r,
  l2h_CLK_GATE_EN_REG_NIC_r,
  l2h_CLK_GATE_EN_REG_TIMER0_r,
  l2h_CLK_GATE_EN_REG_TIMER1_r,
  l2h_CLK_GATE_EN_REG_UART0_r,
  l2h_CLK_GATE_EN_REG_UART1_r,
  l2h_CLK_GATE_EN_REG_WDOG_r,
  l2h_SYS_RESET_PROP_REG_DMA0_r,
  l2h_SYS_RESET_PROP_REG_DMA1_r,
  l2h_SYS_RESET_PROP_REG_SRAMx_r,
  l2h_SYS_RESET_PROP_REG_TLX_FWD_r,
  l2h_SYS_RESET_PROP_REG_GGRA_r,
  l2h_SYS_RESET_PROP_REG_NIC_r,
  l2h_SYS_RESET_PROP_REG_TIMER0_r,
  l2h_SYS_RESET_PROP_REG_TIMER1_r,
  l2h_SYS_RESET_PROP_REG_UART0_r,
  l2h_SYS_RESET_PROP_REG_UART1_r,
  l2h_SYS_RESET_PROP_REG_WDOG_r,
  l2h_RESET_REQ_REG_DMA0_r,
  l2h_RESET_REQ_REG_DMA1_r,
  l2h_RESET_REQ_REG_TLX_FWD_r,
  l2h_RESET_REQ_REG_TLX_REV_r,
  l2h_RESET_REQ_REG_GGRA_r,
  l2h_RESET_REQ_REG_NIC_r,
  l2h_RESET_REQ_REG_TIMER0_r,
  l2h_RESET_REQ_REG_TIMER1_r,
  l2h_RESET_REQ_REG_UART0_r,
  l2h_RESET_REQ_REG_UART1_r,
  l2h_RESET_REQ_REG_WDOG_r,
  l2h_SYS_TICK_CONFIG_REG_CALIB_r,
  l2h_SYS_TICK_CONFIG_REG_NOT_10_MS_r,
  l2h_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_r,
  l2h_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_ID_REG_w;
  input     [31:0] d2l_ID_REG_w_enable;
  input    d2l_ID_REG_we;
  input    d2l_ID_REG_re;
  input     [31:0] d2l_PAD_STRENGTH_CTRL_REG_w;
  input     [31:0] d2l_PAD_STRENGTH_CTRL_REG_w_enable;
  input    d2l_PAD_STRENGTH_CTRL_REG_we;
  input    d2l_PAD_STRENGTH_CTRL_REG_re;
  input     [31:0] d2l_SYS_CLK_SELECT_REG_w;
  input     [31:0] d2l_SYS_CLK_SELECT_REG_w_enable;
  input    d2l_SYS_CLK_SELECT_REG_we;
  input    d2l_SYS_CLK_SELECT_REG_re;
  input     [31:0] d2l_DMA0_PCLK_SELECT_REG_w;
  input     [31:0] d2l_DMA0_PCLK_SELECT_REG_w_enable;
  input    d2l_DMA0_PCLK_SELECT_REG_we;
  input    d2l_DMA0_PCLK_SELECT_REG_re;
  input     [31:0] d2l_DMA1_PCLK_SELECT_REG_w;
  input     [31:0] d2l_DMA1_PCLK_SELECT_REG_w_enable;
  input    d2l_DMA1_PCLK_SELECT_REG_we;
  input    d2l_DMA1_PCLK_SELECT_REG_re;
  input     [31:0] d2l_TLX_FWD_CLK_SELECT_REG_w;
  input     [31:0] d2l_TLX_FWD_CLK_SELECT_REG_w_enable;
  input    d2l_TLX_FWD_CLK_SELECT_REG_we;
  input    d2l_TLX_FWD_CLK_SELECT_REG_re;
  input     [31:0] d2l_CGRA_CLK_SELECT_REG_w;
  input     [31:0] d2l_CGRA_CLK_SELECT_REG_w_enable;
  input    d2l_CGRA_CLK_SELECT_REG_we;
  input    d2l_CGRA_CLK_SELECT_REG_re;
  input     [31:0] d2l_TIMER0_CLK_SELECT_REG_w;
  input     [31:0] d2l_TIMER0_CLK_SELECT_REG_w_enable;
  input    d2l_TIMER0_CLK_SELECT_REG_we;
  input    d2l_TIMER0_CLK_SELECT_REG_re;
  input     [31:0] d2l_TIMER1_CLK_SELECT_REG_w;
  input     [31:0] d2l_TIMER1_CLK_SELECT_REG_w_enable;
  input    d2l_TIMER1_CLK_SELECT_REG_we;
  input    d2l_TIMER1_CLK_SELECT_REG_re;
  input     [31:0] d2l_UART0_CLK_SELECT_REG_w;
  input     [31:0] d2l_UART0_CLK_SELECT_REG_w_enable;
  input    d2l_UART0_CLK_SELECT_REG_we;
  input    d2l_UART0_CLK_SELECT_REG_re;
  input     [31:0] d2l_UART1_CLK_SELECT_REG_w;
  input     [31:0] d2l_UART1_CLK_SELECT_REG_w_enable;
  input    d2l_UART1_CLK_SELECT_REG_we;
  input    d2l_UART1_CLK_SELECT_REG_re;
  input     [31:0] d2l_WDOG_CLK_SELECT_REG_w;
  input     [31:0] d2l_WDOG_CLK_SELECT_REG_w_enable;
  input    d2l_WDOG_CLK_SELECT_REG_we;
  input    d2l_WDOG_CLK_SELECT_REG_re;
  input     [31:0] d2l_CLK_GATE_EN_REG_w;
  input     [31:0] d2l_CLK_GATE_EN_REG_w_enable;
  input    d2l_CLK_GATE_EN_REG_we;
  input    d2l_CLK_GATE_EN_REG_re;
  input     [31:0] d2l_SYS_RESET_PROP_REG_w;
  input     [31:0] d2l_SYS_RESET_PROP_REG_w_enable;
  input    d2l_SYS_RESET_PROP_REG_we;
  input    d2l_SYS_RESET_PROP_REG_re;
  input     [31:0] d2l_RESET_REQ_REG_w;
  input     [31:0] d2l_RESET_REQ_REG_w_enable;
  input    d2l_RESET_REQ_REG_we;
  input    d2l_RESET_REQ_REG_re;
  input     [31:0] d2l_RESET_ACK_REG_w;
  input     [31:0] d2l_RESET_ACK_REG_w_enable;
  input    d2l_RESET_ACK_REG_we;
  input    d2l_RESET_ACK_REG_re;
  input     [31:0] d2l_SYS_TICK_CONFIG_REG_w;
  input     [31:0] d2l_SYS_TICK_CONFIG_REG_w_enable;
  input    d2l_SYS_TICK_CONFIG_REG_we;
  input    d2l_SYS_TICK_CONFIG_REG_re;
  input     [31:0] d2l_SYS_RESET_AGGR_REG_w;
  input     [31:0] d2l_SYS_RESET_AGGR_REG_w_enable;
  input    d2l_SYS_RESET_AGGR_REG_we;
  input    d2l_SYS_RESET_AGGR_REG_re;
  input    h2l_RESET_ACK_REG_DMA0_w;
  input    h2l_RESET_ACK_REG_DMA1_w;
  input    h2l_RESET_ACK_REG_TLX_FWD_w;
  input    h2l_RESET_ACK_REG_TLX_REV_w;
  input    h2l_RESET_ACK_REG_GGRA_w;
  input    h2l_RESET_ACK_REG_NIC_w;
  input    h2l_RESET_ACK_REG_TIMER0_w;
  input    h2l_RESET_ACK_REG_TIMER1_w;
  input    h2l_RESET_ACK_REG_UART0_w;
  input    h2l_RESET_ACK_REG_UART1_w;
  input    h2l_RESET_ACK_REG_WDOG_w;

  //------- outputs
  output     [31:0] l2d_ID_REG_r;
  output     [31:0] l2d_PAD_STRENGTH_CTRL_REG_r;
  output     [31:0] l2d_SYS_CLK_SELECT_REG_r;
  output     [31:0] l2d_DMA0_PCLK_SELECT_REG_r;
  output     [31:0] l2d_DMA1_PCLK_SELECT_REG_r;
  output     [31:0] l2d_TLX_FWD_CLK_SELECT_REG_r;
  output     [31:0] l2d_CGRA_CLK_SELECT_REG_r;
  output     [31:0] l2d_TIMER0_CLK_SELECT_REG_r;
  output     [31:0] l2d_TIMER1_CLK_SELECT_REG_r;
  output     [31:0] l2d_UART0_CLK_SELECT_REG_r;
  output     [31:0] l2d_UART1_CLK_SELECT_REG_r;
  output     [31:0] l2d_WDOG_CLK_SELECT_REG_r;
  output     [31:0] l2d_CLK_GATE_EN_REG_r;
  output     [31:0] l2d_SYS_RESET_PROP_REG_r;
  output     [31:0] l2d_RESET_REQ_REG_r;
  output     [31:0] l2d_RESET_ACK_REG_r;
  output     [31:0] l2d_SYS_TICK_CONFIG_REG_r;
  output     [31:0] l2d_SYS_RESET_AGGR_REG_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP0_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP1_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP2_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP3_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP4_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP5_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP6_r;
  output     [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP7_r;
  output    l2h_SYS_CLK_SELECT_REG_SELECT_swmod_o;
  output     [2:0] l2h_SYS_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_DMA0_PCLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_DMA1_PCLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_TLX_FWD_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_CGRA_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_TIMER0_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_TIMER1_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_UART0_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_UART1_CLK_SELECT_REG_SELECT_r;
  output     [2:0] l2h_WDOG_CLK_SELECT_REG_SELECT_r;
  output    l2h_CLK_GATE_EN_REG_CPU_r;
  output    l2h_CLK_GATE_EN_REG_DAP_r;
  output    l2h_CLK_GATE_EN_REG_DMA0_r;
  output    l2h_CLK_GATE_EN_REG_DMA1_r;
  output    l2h_CLK_GATE_EN_REG_SRAMx_r;
  output    l2h_CLK_GATE_EN_REG_TLX_FWD_r;
  output    l2h_CLK_GATE_EN_REG_GGRA_r;
  output    l2h_CLK_GATE_EN_REG_NIC_r;
  output    l2h_CLK_GATE_EN_REG_TIMER0_r;
  output    l2h_CLK_GATE_EN_REG_TIMER1_r;
  output    l2h_CLK_GATE_EN_REG_UART0_r;
  output    l2h_CLK_GATE_EN_REG_UART1_r;
  output    l2h_CLK_GATE_EN_REG_WDOG_r;
  output    l2h_SYS_RESET_PROP_REG_DMA0_r;
  output    l2h_SYS_RESET_PROP_REG_DMA1_r;
  output    l2h_SYS_RESET_PROP_REG_SRAMx_r;
  output    l2h_SYS_RESET_PROP_REG_TLX_FWD_r;
  output    l2h_SYS_RESET_PROP_REG_GGRA_r;
  output    l2h_SYS_RESET_PROP_REG_NIC_r;
  output    l2h_SYS_RESET_PROP_REG_TIMER0_r;
  output    l2h_SYS_RESET_PROP_REG_TIMER1_r;
  output    l2h_SYS_RESET_PROP_REG_UART0_r;
  output    l2h_SYS_RESET_PROP_REG_UART1_r;
  output    l2h_SYS_RESET_PROP_REG_WDOG_r;
  output    l2h_RESET_REQ_REG_DMA0_r;
  output    l2h_RESET_REQ_REG_DMA1_r;
  output    l2h_RESET_REQ_REG_TLX_FWD_r;
  output    l2h_RESET_REQ_REG_TLX_REV_r;
  output    l2h_RESET_REQ_REG_GGRA_r;
  output    l2h_RESET_REQ_REG_NIC_r;
  output    l2h_RESET_REQ_REG_TIMER0_r;
  output    l2h_RESET_REQ_REG_TIMER1_r;
  output    l2h_RESET_REQ_REG_UART0_r;
  output    l2h_RESET_REQ_REG_UART1_r;
  output    l2h_RESET_REQ_REG_WDOG_r;
  output     [23:0] l2h_SYS_TICK_CONFIG_REG_CALIB_r;
  output    l2h_SYS_TICK_CONFIG_REG_NOT_10_MS_r;
  output    l2h_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_r;
  output    l2h_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_r;


  //------- wire defines
  wire   [31:0] rg_ID_REG_ID_VALUE;
  
  //------- reg defines
  reg   [31:0] l2d_ID_REG_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP0;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP0_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP0_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP1;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP1_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP1_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP2;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP2_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP2_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP3;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP3_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP3_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP4;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP4_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP4_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP5;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP5_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP5_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP6;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP6_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP6_r;
  reg   [2:0] rg_PAD_STRENGTH_CTRL_REG_GRP7;
  reg   [2:0] reg_PAD_STRENGTH_CTRL_REG_GRP7_next;
  reg   [2:0] l2h_PAD_STRENGTH_CTRL_REG_GRP7_r;
  reg   [31:0] l2d_PAD_STRENGTH_CTRL_REG_r;
  reg   [2:0] rg_SYS_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_SYS_CLK_SELECT_REG_SELECT_next;
  reg  l2h_SYS_CLK_SELECT_REG_SELECT_swmod_o;
  reg   [2:0] l2h_SYS_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_SYS_CLK_SELECT_REG_r;
  reg   [2:0] rg_DMA0_PCLK_SELECT_REG_SELECT;
  reg   [2:0] reg_DMA0_PCLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_DMA0_PCLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_DMA0_PCLK_SELECT_REG_r;
  reg   [2:0] rg_DMA1_PCLK_SELECT_REG_SELECT;
  reg   [2:0] reg_DMA1_PCLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_DMA1_PCLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_DMA1_PCLK_SELECT_REG_r;
  reg   [2:0] rg_TLX_FWD_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_TLX_FWD_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_TLX_FWD_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_TLX_FWD_CLK_SELECT_REG_r;
  reg   [2:0] rg_CGRA_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_CGRA_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_CGRA_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_CGRA_CLK_SELECT_REG_r;
  reg   [2:0] rg_TIMER0_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_TIMER0_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_TIMER0_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_TIMER0_CLK_SELECT_REG_r;
  reg   [2:0] rg_TIMER1_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_TIMER1_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_TIMER1_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_TIMER1_CLK_SELECT_REG_r;
  reg   [2:0] rg_UART0_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_UART0_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_UART0_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_UART0_CLK_SELECT_REG_r;
  reg   [2:0] rg_UART1_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_UART1_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_UART1_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_UART1_CLK_SELECT_REG_r;
  reg   [2:0] rg_WDOG_CLK_SELECT_REG_SELECT;
  reg   [2:0] reg_WDOG_CLK_SELECT_REG_SELECT_next;
  reg   [2:0] l2h_WDOG_CLK_SELECT_REG_SELECT_r;
  reg   [31:0] l2d_WDOG_CLK_SELECT_REG_r;
  reg  rg_CLK_GATE_EN_REG_CPU;
  reg  reg_CLK_GATE_EN_REG_CPU_next;
  reg  l2h_CLK_GATE_EN_REG_CPU_r;
  reg  rg_CLK_GATE_EN_REG_DAP;
  reg  reg_CLK_GATE_EN_REG_DAP_next;
  reg  l2h_CLK_GATE_EN_REG_DAP_r;
  reg  rg_CLK_GATE_EN_REG_DMA0;
  reg  reg_CLK_GATE_EN_REG_DMA0_next;
  reg  l2h_CLK_GATE_EN_REG_DMA0_r;
  reg  rg_CLK_GATE_EN_REG_DMA1;
  reg  reg_CLK_GATE_EN_REG_DMA1_next;
  reg  l2h_CLK_GATE_EN_REG_DMA1_r;
  reg  rg_CLK_GATE_EN_REG_SRAMx;
  reg  reg_CLK_GATE_EN_REG_SRAMx_next;
  reg  l2h_CLK_GATE_EN_REG_SRAMx_r;
  reg  rg_CLK_GATE_EN_REG_TLX_FWD;
  reg  reg_CLK_GATE_EN_REG_TLX_FWD_next;
  reg  l2h_CLK_GATE_EN_REG_TLX_FWD_r;
  reg  rg_CLK_GATE_EN_REG_GGRA;
  reg  reg_CLK_GATE_EN_REG_GGRA_next;
  reg  l2h_CLK_GATE_EN_REG_GGRA_r;
  reg  rg_CLK_GATE_EN_REG_NIC;
  reg  reg_CLK_GATE_EN_REG_NIC_next;
  reg  l2h_CLK_GATE_EN_REG_NIC_r;
  reg  rg_CLK_GATE_EN_REG_TIMER0;
  reg  reg_CLK_GATE_EN_REG_TIMER0_next;
  reg  l2h_CLK_GATE_EN_REG_TIMER0_r;
  reg  rg_CLK_GATE_EN_REG_TIMER1;
  reg  reg_CLK_GATE_EN_REG_TIMER1_next;
  reg  l2h_CLK_GATE_EN_REG_TIMER1_r;
  reg  rg_CLK_GATE_EN_REG_UART0;
  reg  reg_CLK_GATE_EN_REG_UART0_next;
  reg  l2h_CLK_GATE_EN_REG_UART0_r;
  reg  rg_CLK_GATE_EN_REG_UART1;
  reg  reg_CLK_GATE_EN_REG_UART1_next;
  reg  l2h_CLK_GATE_EN_REG_UART1_r;
  reg  rg_CLK_GATE_EN_REG_WDOG;
  reg  reg_CLK_GATE_EN_REG_WDOG_next;
  reg  l2h_CLK_GATE_EN_REG_WDOG_r;
  reg   [31:0] l2d_CLK_GATE_EN_REG_r;
  reg  rg_SYS_RESET_PROP_REG_DMA0;
  reg  reg_SYS_RESET_PROP_REG_DMA0_next;
  reg  l2h_SYS_RESET_PROP_REG_DMA0_r;
  reg  rg_SYS_RESET_PROP_REG_DMA1;
  reg  reg_SYS_RESET_PROP_REG_DMA1_next;
  reg  l2h_SYS_RESET_PROP_REG_DMA1_r;
  reg  rg_SYS_RESET_PROP_REG_SRAMx;
  reg  reg_SYS_RESET_PROP_REG_SRAMx_next;
  reg  l2h_SYS_RESET_PROP_REG_SRAMx_r;
  reg  rg_SYS_RESET_PROP_REG_TLX_FWD;
  reg  reg_SYS_RESET_PROP_REG_TLX_FWD_next;
  reg  l2h_SYS_RESET_PROP_REG_TLX_FWD_r;
  reg  rg_SYS_RESET_PROP_REG_GGRA;
  reg  reg_SYS_RESET_PROP_REG_GGRA_next;
  reg  l2h_SYS_RESET_PROP_REG_GGRA_r;
  reg  rg_SYS_RESET_PROP_REG_NIC;
  reg  reg_SYS_RESET_PROP_REG_NIC_next;
  reg  l2h_SYS_RESET_PROP_REG_NIC_r;
  reg  rg_SYS_RESET_PROP_REG_TIMER0;
  reg  reg_SYS_RESET_PROP_REG_TIMER0_next;
  reg  l2h_SYS_RESET_PROP_REG_TIMER0_r;
  reg  rg_SYS_RESET_PROP_REG_TIMER1;
  reg  reg_SYS_RESET_PROP_REG_TIMER1_next;
  reg  l2h_SYS_RESET_PROP_REG_TIMER1_r;
  reg  rg_SYS_RESET_PROP_REG_UART0;
  reg  reg_SYS_RESET_PROP_REG_UART0_next;
  reg  l2h_SYS_RESET_PROP_REG_UART0_r;
  reg  rg_SYS_RESET_PROP_REG_UART1;
  reg  reg_SYS_RESET_PROP_REG_UART1_next;
  reg  l2h_SYS_RESET_PROP_REG_UART1_r;
  reg  rg_SYS_RESET_PROP_REG_WDOG;
  reg  reg_SYS_RESET_PROP_REG_WDOG_next;
  reg  l2h_SYS_RESET_PROP_REG_WDOG_r;
  reg   [31:0] l2d_SYS_RESET_PROP_REG_r;
  reg  rg_RESET_REQ_REG_DMA0;
  reg  reg_RESET_REQ_REG_DMA0_next;
  reg  l2h_RESET_REQ_REG_DMA0_r;
  reg  rg_RESET_REQ_REG_DMA1;
  reg  reg_RESET_REQ_REG_DMA1_next;
  reg  l2h_RESET_REQ_REG_DMA1_r;
  reg  rg_RESET_REQ_REG_TLX_FWD;
  reg  reg_RESET_REQ_REG_TLX_FWD_next;
  reg  l2h_RESET_REQ_REG_TLX_FWD_r;
  reg  rg_RESET_REQ_REG_TLX_REV;
  reg  reg_RESET_REQ_REG_TLX_REV_next;
  reg  l2h_RESET_REQ_REG_TLX_REV_r;
  reg  rg_RESET_REQ_REG_GGRA;
  reg  reg_RESET_REQ_REG_GGRA_next;
  reg  l2h_RESET_REQ_REG_GGRA_r;
  reg  rg_RESET_REQ_REG_NIC;
  reg  reg_RESET_REQ_REG_NIC_next;
  reg  l2h_RESET_REQ_REG_NIC_r;
  reg  rg_RESET_REQ_REG_TIMER0;
  reg  reg_RESET_REQ_REG_TIMER0_next;
  reg  l2h_RESET_REQ_REG_TIMER0_r;
  reg  rg_RESET_REQ_REG_TIMER1;
  reg  reg_RESET_REQ_REG_TIMER1_next;
  reg  l2h_RESET_REQ_REG_TIMER1_r;
  reg  rg_RESET_REQ_REG_UART0;
  reg  reg_RESET_REQ_REG_UART0_next;
  reg  l2h_RESET_REQ_REG_UART0_r;
  reg  rg_RESET_REQ_REG_UART1;
  reg  reg_RESET_REQ_REG_UART1_next;
  reg  l2h_RESET_REQ_REG_UART1_r;
  reg  rg_RESET_REQ_REG_WDOG;
  reg  reg_RESET_REQ_REG_WDOG_next;
  reg  l2h_RESET_REQ_REG_WDOG_r;
  reg   [31:0] l2d_RESET_REQ_REG_r;
  reg  rg_RESET_ACK_REG_DMA0;
  reg  rg_RESET_ACK_REG_DMA1;
  reg  rg_RESET_ACK_REG_TLX_FWD;
  reg  rg_RESET_ACK_REG_TLX_REV;
  reg  rg_RESET_ACK_REG_GGRA;
  reg  rg_RESET_ACK_REG_NIC;
  reg  rg_RESET_ACK_REG_TIMER0;
  reg  rg_RESET_ACK_REG_TIMER1;
  reg  rg_RESET_ACK_REG_UART0;
  reg  rg_RESET_ACK_REG_UART1;
  reg  rg_RESET_ACK_REG_WDOG;
  reg   [31:0] l2d_RESET_ACK_REG_r;
  reg   [23:0] rg_SYS_TICK_CONFIG_REG_CALIB;
  reg   [23:0] reg_SYS_TICK_CONFIG_REG_CALIB_next;
  reg   [23:0] l2h_SYS_TICK_CONFIG_REG_CALIB_r;
  reg  rg_SYS_TICK_CONFIG_REG_NOT_10_MS;
  reg  reg_SYS_TICK_CONFIG_REG_NOT_10_MS_next;
  reg  l2h_SYS_TICK_CONFIG_REG_NOT_10_MS_r;
  reg   [31:0] l2d_SYS_TICK_CONFIG_REG_r;
  reg  rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN;
  reg  reg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_next;
  reg  l2h_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_r;
  reg  rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN;
  reg  reg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_next;
  reg  l2h_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_r;
  reg   [31:0] l2d_SYS_RESET_AGGR_REG_r;
  
  
  //------- assigns
  assign  rg_ID_REG_ID_VALUE = 32'h5a5a5a5a;
  
  //------- combinatorial assigns for CLK_GATE_EN_REG (pio read data)
  always @ (*) begin
    l2d_CLK_GATE_EN_REG_r = 32'b0;
    l2d_CLK_GATE_EN_REG_r [1]  = rg_CLK_GATE_EN_REG_CPU;
    l2d_CLK_GATE_EN_REG_r [2]  = rg_CLK_GATE_EN_REG_DAP;
    l2d_CLK_GATE_EN_REG_r [3]  = rg_CLK_GATE_EN_REG_DMA0;
    l2d_CLK_GATE_EN_REG_r [4]  = rg_CLK_GATE_EN_REG_DMA1;
    l2d_CLK_GATE_EN_REG_r [5]  = rg_CLK_GATE_EN_REG_SRAMx;
    l2d_CLK_GATE_EN_REG_r [6]  = rg_CLK_GATE_EN_REG_TLX_FWD;
    l2d_CLK_GATE_EN_REG_r [8]  = rg_CLK_GATE_EN_REG_GGRA;
    l2d_CLK_GATE_EN_REG_r [9]  = rg_CLK_GATE_EN_REG_NIC;
    l2d_CLK_GATE_EN_REG_r [10]  = rg_CLK_GATE_EN_REG_TIMER0;
    l2d_CLK_GATE_EN_REG_r [11]  = rg_CLK_GATE_EN_REG_TIMER1;
    l2d_CLK_GATE_EN_REG_r [12]  = rg_CLK_GATE_EN_REG_UART0;
    l2d_CLK_GATE_EN_REG_r [13]  = rg_CLK_GATE_EN_REG_UART1;
    l2d_CLK_GATE_EN_REG_r [14]  = rg_CLK_GATE_EN_REG_WDOG;
  end
  
  //------- combinatorial assigns for PAD_STRENGTH_CTRL_REG
  always @ (*) begin
    reg_PAD_STRENGTH_CTRL_REG_GRP0_next = rg_PAD_STRENGTH_CTRL_REG_GRP0;
    l2h_PAD_STRENGTH_CTRL_REG_GRP0_r = rg_PAD_STRENGTH_CTRL_REG_GRP0;
    reg_PAD_STRENGTH_CTRL_REG_GRP1_next = rg_PAD_STRENGTH_CTRL_REG_GRP1;
    l2h_PAD_STRENGTH_CTRL_REG_GRP1_r = rg_PAD_STRENGTH_CTRL_REG_GRP1;
    reg_PAD_STRENGTH_CTRL_REG_GRP2_next = rg_PAD_STRENGTH_CTRL_REG_GRP2;
    l2h_PAD_STRENGTH_CTRL_REG_GRP2_r = rg_PAD_STRENGTH_CTRL_REG_GRP2;
    reg_PAD_STRENGTH_CTRL_REG_GRP3_next = rg_PAD_STRENGTH_CTRL_REG_GRP3;
    l2h_PAD_STRENGTH_CTRL_REG_GRP3_r = rg_PAD_STRENGTH_CTRL_REG_GRP3;
    reg_PAD_STRENGTH_CTRL_REG_GRP4_next = rg_PAD_STRENGTH_CTRL_REG_GRP4;
    l2h_PAD_STRENGTH_CTRL_REG_GRP4_r = rg_PAD_STRENGTH_CTRL_REG_GRP4;
    reg_PAD_STRENGTH_CTRL_REG_GRP5_next = rg_PAD_STRENGTH_CTRL_REG_GRP5;
    l2h_PAD_STRENGTH_CTRL_REG_GRP5_r = rg_PAD_STRENGTH_CTRL_REG_GRP5;
    reg_PAD_STRENGTH_CTRL_REG_GRP6_next = rg_PAD_STRENGTH_CTRL_REG_GRP6;
    l2h_PAD_STRENGTH_CTRL_REG_GRP6_r = rg_PAD_STRENGTH_CTRL_REG_GRP6;
    reg_PAD_STRENGTH_CTRL_REG_GRP7_next = rg_PAD_STRENGTH_CTRL_REG_GRP7;
    l2h_PAD_STRENGTH_CTRL_REG_GRP7_r = rg_PAD_STRENGTH_CTRL_REG_GRP7;
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP0_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [2:0]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [2:0] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP0_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [2:0] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP1_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [5:3]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [5:3] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP1_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [5:3] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP2_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [8:6]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [8:6] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP2_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [8:6] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP3_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [11:9]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [11:9] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP3_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [11:9] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP4_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [14:12]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [14:12] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP4_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [14:12] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP5_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [17:15]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [17:15] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP5_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [17:15] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP6_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [20:18]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [20:18] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP6_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [20:18] ));
    if (d2l_PAD_STRENGTH_CTRL_REG_we) reg_PAD_STRENGTH_CTRL_REG_GRP7_next = ((d2l_PAD_STRENGTH_CTRL_REG_w [23:21]  & d2l_PAD_STRENGTH_CTRL_REG_w_enable [23:21] ) | (reg_PAD_STRENGTH_CTRL_REG_GRP7_next & ~d2l_PAD_STRENGTH_CTRL_REG_w_enable [23:21] ));
  end
  
  //------- reg assigns for PAD_STRENGTH_CTRL_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_PAD_STRENGTH_CTRL_REG_GRP0 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP1 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP2 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP3 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP4 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP5 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP6 <= #1 3'h0;
      rg_PAD_STRENGTH_CTRL_REG_GRP7 <= #1 3'h0;
    end
    else begin
      rg_PAD_STRENGTH_CTRL_REG_GRP0 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP0_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP1 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP1_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP2 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP2_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP3 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP3_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP4 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP4_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP5 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP5_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP6 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP6_next;
      rg_PAD_STRENGTH_CTRL_REG_GRP7 <= #1  reg_PAD_STRENGTH_CTRL_REG_GRP7_next;
    end
  end
  
  //------- combinatorial assigns for RESET_ACK_REG (pio read data)
  always @ (*) begin
    l2d_RESET_ACK_REG_r = 32'b0;
    l2d_RESET_ACK_REG_r [3]  = rg_RESET_ACK_REG_DMA0;
    l2d_RESET_ACK_REG_r [4]  = rg_RESET_ACK_REG_DMA1;
    l2d_RESET_ACK_REG_r [6]  = rg_RESET_ACK_REG_TLX_FWD;
    l2d_RESET_ACK_REG_r [7]  = rg_RESET_ACK_REG_TLX_REV;
    l2d_RESET_ACK_REG_r [8]  = rg_RESET_ACK_REG_GGRA;
    l2d_RESET_ACK_REG_r [9]  = rg_RESET_ACK_REG_NIC;
    l2d_RESET_ACK_REG_r [10]  = rg_RESET_ACK_REG_TIMER0;
    l2d_RESET_ACK_REG_r [11]  = rg_RESET_ACK_REG_TIMER1;
    l2d_RESET_ACK_REG_r [12]  = rg_RESET_ACK_REG_UART0;
    l2d_RESET_ACK_REG_r [13]  = rg_RESET_ACK_REG_UART1;
    l2d_RESET_ACK_REG_r [14]  = rg_RESET_ACK_REG_WDOG;
  end
  
  //------- combinatorial assigns for TIMER1_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_TIMER1_CLK_SELECT_REG_r = 32'b0;
    l2d_TIMER1_CLK_SELECT_REG_r [2:0]  = rg_TIMER1_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for WDOG_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_WDOG_CLK_SELECT_REG_r = 32'b0;
    l2d_WDOG_CLK_SELECT_REG_r [2:0]  = rg_WDOG_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for RESET_REQ_REG
  always @ (*) begin
    reg_RESET_REQ_REG_DMA0_next = rg_RESET_REQ_REG_DMA0;
    l2h_RESET_REQ_REG_DMA0_r = rg_RESET_REQ_REG_DMA0;
    reg_RESET_REQ_REG_DMA1_next = rg_RESET_REQ_REG_DMA1;
    l2h_RESET_REQ_REG_DMA1_r = rg_RESET_REQ_REG_DMA1;
    reg_RESET_REQ_REG_TLX_FWD_next = rg_RESET_REQ_REG_TLX_FWD;
    l2h_RESET_REQ_REG_TLX_FWD_r = rg_RESET_REQ_REG_TLX_FWD;
    reg_RESET_REQ_REG_TLX_REV_next = rg_RESET_REQ_REG_TLX_REV;
    l2h_RESET_REQ_REG_TLX_REV_r = rg_RESET_REQ_REG_TLX_REV;
    reg_RESET_REQ_REG_GGRA_next = rg_RESET_REQ_REG_GGRA;
    l2h_RESET_REQ_REG_GGRA_r = rg_RESET_REQ_REG_GGRA;
    reg_RESET_REQ_REG_NIC_next = rg_RESET_REQ_REG_NIC;
    l2h_RESET_REQ_REG_NIC_r = rg_RESET_REQ_REG_NIC;
    reg_RESET_REQ_REG_TIMER0_next = rg_RESET_REQ_REG_TIMER0;
    l2h_RESET_REQ_REG_TIMER0_r = rg_RESET_REQ_REG_TIMER0;
    reg_RESET_REQ_REG_TIMER1_next = rg_RESET_REQ_REG_TIMER1;
    l2h_RESET_REQ_REG_TIMER1_r = rg_RESET_REQ_REG_TIMER1;
    reg_RESET_REQ_REG_UART0_next = rg_RESET_REQ_REG_UART0;
    l2h_RESET_REQ_REG_UART0_r = rg_RESET_REQ_REG_UART0;
    reg_RESET_REQ_REG_UART1_next = rg_RESET_REQ_REG_UART1;
    l2h_RESET_REQ_REG_UART1_r = rg_RESET_REQ_REG_UART1;
    reg_RESET_REQ_REG_WDOG_next = rg_RESET_REQ_REG_WDOG;
    l2h_RESET_REQ_REG_WDOG_r = rg_RESET_REQ_REG_WDOG;
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_DMA0_next = ((d2l_RESET_REQ_REG_w [3]  & d2l_RESET_REQ_REG_w_enable [3] ) | (reg_RESET_REQ_REG_DMA0_next & ~d2l_RESET_REQ_REG_w_enable [3] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_DMA1_next = ((d2l_RESET_REQ_REG_w [4]  & d2l_RESET_REQ_REG_w_enable [4] ) | (reg_RESET_REQ_REG_DMA1_next & ~d2l_RESET_REQ_REG_w_enable [4] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_TLX_FWD_next = ((d2l_RESET_REQ_REG_w [6]  & d2l_RESET_REQ_REG_w_enable [6] ) | (reg_RESET_REQ_REG_TLX_FWD_next & ~d2l_RESET_REQ_REG_w_enable [6] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_TLX_REV_next = ((d2l_RESET_REQ_REG_w [7]  & d2l_RESET_REQ_REG_w_enable [7] ) | (reg_RESET_REQ_REG_TLX_REV_next & ~d2l_RESET_REQ_REG_w_enable [7] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_GGRA_next = ((d2l_RESET_REQ_REG_w [8]  & d2l_RESET_REQ_REG_w_enable [8] ) | (reg_RESET_REQ_REG_GGRA_next & ~d2l_RESET_REQ_REG_w_enable [8] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_NIC_next = ((d2l_RESET_REQ_REG_w [9]  & d2l_RESET_REQ_REG_w_enable [9] ) | (reg_RESET_REQ_REG_NIC_next & ~d2l_RESET_REQ_REG_w_enable [9] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_TIMER0_next = ((d2l_RESET_REQ_REG_w [10]  & d2l_RESET_REQ_REG_w_enable [10] ) | (reg_RESET_REQ_REG_TIMER0_next & ~d2l_RESET_REQ_REG_w_enable [10] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_TIMER1_next = ((d2l_RESET_REQ_REG_w [11]  & d2l_RESET_REQ_REG_w_enable [11] ) | (reg_RESET_REQ_REG_TIMER1_next & ~d2l_RESET_REQ_REG_w_enable [11] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_UART0_next = ((d2l_RESET_REQ_REG_w [12]  & d2l_RESET_REQ_REG_w_enable [12] ) | (reg_RESET_REQ_REG_UART0_next & ~d2l_RESET_REQ_REG_w_enable [12] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_UART1_next = ((d2l_RESET_REQ_REG_w [13]  & d2l_RESET_REQ_REG_w_enable [13] ) | (reg_RESET_REQ_REG_UART1_next & ~d2l_RESET_REQ_REG_w_enable [13] ));
    if (d2l_RESET_REQ_REG_we) reg_RESET_REQ_REG_WDOG_next = ((d2l_RESET_REQ_REG_w [14]  & d2l_RESET_REQ_REG_w_enable [14] ) | (reg_RESET_REQ_REG_WDOG_next & ~d2l_RESET_REQ_REG_w_enable [14] ));
  end
  
  //------- reg assigns for RESET_REQ_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_RESET_REQ_REG_DMA0 <= #1 1'b1;
      rg_RESET_REQ_REG_DMA1 <= #1 1'b1;
      rg_RESET_REQ_REG_TLX_FWD <= #1 1'b1;
      rg_RESET_REQ_REG_TLX_REV <= #1 1'b1;
      rg_RESET_REQ_REG_GGRA <= #1 1'b1;
      rg_RESET_REQ_REG_NIC <= #1 1'b1;
      rg_RESET_REQ_REG_TIMER0 <= #1 1'b1;
      rg_RESET_REQ_REG_TIMER1 <= #1 1'b1;
      rg_RESET_REQ_REG_UART0 <= #1 1'b1;
      rg_RESET_REQ_REG_UART1 <= #1 1'b1;
      rg_RESET_REQ_REG_WDOG <= #1 1'b1;
    end
    else begin
      rg_RESET_REQ_REG_DMA0 <= #1  reg_RESET_REQ_REG_DMA0_next;
      rg_RESET_REQ_REG_DMA1 <= #1  reg_RESET_REQ_REG_DMA1_next;
      rg_RESET_REQ_REG_TLX_FWD <= #1  reg_RESET_REQ_REG_TLX_FWD_next;
      rg_RESET_REQ_REG_TLX_REV <= #1  reg_RESET_REQ_REG_TLX_REV_next;
      rg_RESET_REQ_REG_GGRA <= #1  reg_RESET_REQ_REG_GGRA_next;
      rg_RESET_REQ_REG_NIC <= #1  reg_RESET_REQ_REG_NIC_next;
      rg_RESET_REQ_REG_TIMER0 <= #1  reg_RESET_REQ_REG_TIMER0_next;
      rg_RESET_REQ_REG_TIMER1 <= #1  reg_RESET_REQ_REG_TIMER1_next;
      rg_RESET_REQ_REG_UART0 <= #1  reg_RESET_REQ_REG_UART0_next;
      rg_RESET_REQ_REG_UART1 <= #1  reg_RESET_REQ_REG_UART1_next;
      rg_RESET_REQ_REG_WDOG <= #1  reg_RESET_REQ_REG_WDOG_next;
    end
  end
  
  //------- combinatorial assigns for PAD_STRENGTH_CTRL_REG (pio read data)
  always @ (*) begin
    l2d_PAD_STRENGTH_CTRL_REG_r = 32'b0;
    l2d_PAD_STRENGTH_CTRL_REG_r [2:0]  = rg_PAD_STRENGTH_CTRL_REG_GRP0;
    l2d_PAD_STRENGTH_CTRL_REG_r [5:3]  = rg_PAD_STRENGTH_CTRL_REG_GRP1;
    l2d_PAD_STRENGTH_CTRL_REG_r [8:6]  = rg_PAD_STRENGTH_CTRL_REG_GRP2;
    l2d_PAD_STRENGTH_CTRL_REG_r [11:9]  = rg_PAD_STRENGTH_CTRL_REG_GRP3;
    l2d_PAD_STRENGTH_CTRL_REG_r [14:12]  = rg_PAD_STRENGTH_CTRL_REG_GRP4;
    l2d_PAD_STRENGTH_CTRL_REG_r [17:15]  = rg_PAD_STRENGTH_CTRL_REG_GRP5;
    l2d_PAD_STRENGTH_CTRL_REG_r [20:18]  = rg_PAD_STRENGTH_CTRL_REG_GRP6;
    l2d_PAD_STRENGTH_CTRL_REG_r [23:21]  = rg_PAD_STRENGTH_CTRL_REG_GRP7;
  end
  
  //------- combinatorial assigns for DMA0_PCLK_SELECT_REG
  always @ (*) begin
    reg_DMA0_PCLK_SELECT_REG_SELECT_next = rg_DMA0_PCLK_SELECT_REG_SELECT;
    l2h_DMA0_PCLK_SELECT_REG_SELECT_r = rg_DMA0_PCLK_SELECT_REG_SELECT;
    if (d2l_DMA0_PCLK_SELECT_REG_we) reg_DMA0_PCLK_SELECT_REG_SELECT_next = ((d2l_DMA0_PCLK_SELECT_REG_w [2:0]  & d2l_DMA0_PCLK_SELECT_REG_w_enable [2:0] ) | (reg_DMA0_PCLK_SELECT_REG_SELECT_next & ~d2l_DMA0_PCLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for DMA0_PCLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_DMA0_PCLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_DMA0_PCLK_SELECT_REG_SELECT <= #1  reg_DMA0_PCLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for DMA1_PCLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_DMA1_PCLK_SELECT_REG_r = 32'b0;
    l2d_DMA1_PCLK_SELECT_REG_r [2:0]  = rg_DMA1_PCLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for TIMER1_CLK_SELECT_REG
  always @ (*) begin
    reg_TIMER1_CLK_SELECT_REG_SELECT_next = rg_TIMER1_CLK_SELECT_REG_SELECT;
    l2h_TIMER1_CLK_SELECT_REG_SELECT_r = rg_TIMER1_CLK_SELECT_REG_SELECT;
    if (d2l_TIMER1_CLK_SELECT_REG_we) reg_TIMER1_CLK_SELECT_REG_SELECT_next = ((d2l_TIMER1_CLK_SELECT_REG_w [2:0]  & d2l_TIMER1_CLK_SELECT_REG_w_enable [2:0] ) | (reg_TIMER1_CLK_SELECT_REG_SELECT_next & ~d2l_TIMER1_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for TIMER1_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_TIMER1_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_TIMER1_CLK_SELECT_REG_SELECT <= #1  reg_TIMER1_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for UART0_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_UART0_CLK_SELECT_REG_r = 32'b0;
    l2d_UART0_CLK_SELECT_REG_r [2:0]  = rg_UART0_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for SYS_TICK_CONFIG_REG (pio read data)
  always @ (*) begin
    l2d_SYS_TICK_CONFIG_REG_r = 32'b0;
    l2d_SYS_TICK_CONFIG_REG_r [23:0]  = rg_SYS_TICK_CONFIG_REG_CALIB;
    l2d_SYS_TICK_CONFIG_REG_r [31]  = rg_SYS_TICK_CONFIG_REG_NOT_10_MS;
  end
  
  //------- combinatorial assigns for SYS_RESET_AGGR_REG (pio read data)
  always @ (*) begin
    l2d_SYS_RESET_AGGR_REG_r = 32'b0;
    l2d_SYS_RESET_AGGR_REG_r [0]  = rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN;
    l2d_SYS_RESET_AGGR_REG_r [1]  = rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN;
  end
  
  //------- combinatorial assigns for SYS_CLK_SELECT_REG
  always @ (*) begin
    reg_SYS_CLK_SELECT_REG_SELECT_next = rg_SYS_CLK_SELECT_REG_SELECT;
    l2h_SYS_CLK_SELECT_REG_SELECT_r = rg_SYS_CLK_SELECT_REG_SELECT;
    if (d2l_SYS_CLK_SELECT_REG_we) reg_SYS_CLK_SELECT_REG_SELECT_next = ((d2l_SYS_CLK_SELECT_REG_w [2:0]  & d2l_SYS_CLK_SELECT_REG_w_enable [2:0] ) | (reg_SYS_CLK_SELECT_REG_SELECT_next & ~d2l_SYS_CLK_SELECT_REG_w_enable [2:0] ));
    l2h_SYS_CLK_SELECT_REG_SELECT_swmod_o = d2l_SYS_CLK_SELECT_REG_we;
  end
  
  //------- reg assigns for SYS_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_SYS_CLK_SELECT_REG_SELECT <= #1 3'b1;
    end
    else begin
      rg_SYS_CLK_SELECT_REG_SELECT <= #1  reg_SYS_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for DMA1_PCLK_SELECT_REG
  always @ (*) begin
    reg_DMA1_PCLK_SELECT_REG_SELECT_next = rg_DMA1_PCLK_SELECT_REG_SELECT;
    l2h_DMA1_PCLK_SELECT_REG_SELECT_r = rg_DMA1_PCLK_SELECT_REG_SELECT;
    if (d2l_DMA1_PCLK_SELECT_REG_we) reg_DMA1_PCLK_SELECT_REG_SELECT_next = ((d2l_DMA1_PCLK_SELECT_REG_w [2:0]  & d2l_DMA1_PCLK_SELECT_REG_w_enable [2:0] ) | (reg_DMA1_PCLK_SELECT_REG_SELECT_next & ~d2l_DMA1_PCLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for DMA1_PCLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_DMA1_PCLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_DMA1_PCLK_SELECT_REG_SELECT <= #1  reg_DMA1_PCLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for UART1_CLK_SELECT_REG
  always @ (*) begin
    reg_UART1_CLK_SELECT_REG_SELECT_next = rg_UART1_CLK_SELECT_REG_SELECT;
    l2h_UART1_CLK_SELECT_REG_SELECT_r = rg_UART1_CLK_SELECT_REG_SELECT;
    if (d2l_UART1_CLK_SELECT_REG_we) reg_UART1_CLK_SELECT_REG_SELECT_next = ((d2l_UART1_CLK_SELECT_REG_w [2:0]  & d2l_UART1_CLK_SELECT_REG_w_enable [2:0] ) | (reg_UART1_CLK_SELECT_REG_SELECT_next & ~d2l_UART1_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for UART1_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_UART1_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_UART1_CLK_SELECT_REG_SELECT <= #1  reg_UART1_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for SYS_RESET_PROP_REG
  always @ (*) begin
    reg_SYS_RESET_PROP_REG_DMA0_next = rg_SYS_RESET_PROP_REG_DMA0;
    l2h_SYS_RESET_PROP_REG_DMA0_r = rg_SYS_RESET_PROP_REG_DMA0;
    reg_SYS_RESET_PROP_REG_DMA1_next = rg_SYS_RESET_PROP_REG_DMA1;
    l2h_SYS_RESET_PROP_REG_DMA1_r = rg_SYS_RESET_PROP_REG_DMA1;
    reg_SYS_RESET_PROP_REG_SRAMx_next = rg_SYS_RESET_PROP_REG_SRAMx;
    l2h_SYS_RESET_PROP_REG_SRAMx_r = rg_SYS_RESET_PROP_REG_SRAMx;
    reg_SYS_RESET_PROP_REG_TLX_FWD_next = rg_SYS_RESET_PROP_REG_TLX_FWD;
    l2h_SYS_RESET_PROP_REG_TLX_FWD_r = rg_SYS_RESET_PROP_REG_TLX_FWD;
    reg_SYS_RESET_PROP_REG_GGRA_next = rg_SYS_RESET_PROP_REG_GGRA;
    l2h_SYS_RESET_PROP_REG_GGRA_r = rg_SYS_RESET_PROP_REG_GGRA;
    reg_SYS_RESET_PROP_REG_NIC_next = rg_SYS_RESET_PROP_REG_NIC;
    l2h_SYS_RESET_PROP_REG_NIC_r = rg_SYS_RESET_PROP_REG_NIC;
    reg_SYS_RESET_PROP_REG_TIMER0_next = rg_SYS_RESET_PROP_REG_TIMER0;
    l2h_SYS_RESET_PROP_REG_TIMER0_r = rg_SYS_RESET_PROP_REG_TIMER0;
    reg_SYS_RESET_PROP_REG_TIMER1_next = rg_SYS_RESET_PROP_REG_TIMER1;
    l2h_SYS_RESET_PROP_REG_TIMER1_r = rg_SYS_RESET_PROP_REG_TIMER1;
    reg_SYS_RESET_PROP_REG_UART0_next = rg_SYS_RESET_PROP_REG_UART0;
    l2h_SYS_RESET_PROP_REG_UART0_r = rg_SYS_RESET_PROP_REG_UART0;
    reg_SYS_RESET_PROP_REG_UART1_next = rg_SYS_RESET_PROP_REG_UART1;
    l2h_SYS_RESET_PROP_REG_UART1_r = rg_SYS_RESET_PROP_REG_UART1;
    reg_SYS_RESET_PROP_REG_WDOG_next = rg_SYS_RESET_PROP_REG_WDOG;
    l2h_SYS_RESET_PROP_REG_WDOG_r = rg_SYS_RESET_PROP_REG_WDOG;
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_DMA0_next = ((d2l_SYS_RESET_PROP_REG_w [3]  & d2l_SYS_RESET_PROP_REG_w_enable [3] ) | (reg_SYS_RESET_PROP_REG_DMA0_next & ~d2l_SYS_RESET_PROP_REG_w_enable [3] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_DMA1_next = ((d2l_SYS_RESET_PROP_REG_w [4]  & d2l_SYS_RESET_PROP_REG_w_enable [4] ) | (reg_SYS_RESET_PROP_REG_DMA1_next & ~d2l_SYS_RESET_PROP_REG_w_enable [4] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_SRAMx_next = ((d2l_SYS_RESET_PROP_REG_w [5]  & d2l_SYS_RESET_PROP_REG_w_enable [5] ) | (reg_SYS_RESET_PROP_REG_SRAMx_next & ~d2l_SYS_RESET_PROP_REG_w_enable [5] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_TLX_FWD_next = ((d2l_SYS_RESET_PROP_REG_w [6]  & d2l_SYS_RESET_PROP_REG_w_enable [6] ) | (reg_SYS_RESET_PROP_REG_TLX_FWD_next & ~d2l_SYS_RESET_PROP_REG_w_enable [6] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_GGRA_next = ((d2l_SYS_RESET_PROP_REG_w [8]  & d2l_SYS_RESET_PROP_REG_w_enable [8] ) | (reg_SYS_RESET_PROP_REG_GGRA_next & ~d2l_SYS_RESET_PROP_REG_w_enable [8] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_NIC_next = ((d2l_SYS_RESET_PROP_REG_w [9]  & d2l_SYS_RESET_PROP_REG_w_enable [9] ) | (reg_SYS_RESET_PROP_REG_NIC_next & ~d2l_SYS_RESET_PROP_REG_w_enable [9] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_TIMER0_next = ((d2l_SYS_RESET_PROP_REG_w [10]  & d2l_SYS_RESET_PROP_REG_w_enable [10] ) | (reg_SYS_RESET_PROP_REG_TIMER0_next & ~d2l_SYS_RESET_PROP_REG_w_enable [10] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_TIMER1_next = ((d2l_SYS_RESET_PROP_REG_w [11]  & d2l_SYS_RESET_PROP_REG_w_enable [11] ) | (reg_SYS_RESET_PROP_REG_TIMER1_next & ~d2l_SYS_RESET_PROP_REG_w_enable [11] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_UART0_next = ((d2l_SYS_RESET_PROP_REG_w [12]  & d2l_SYS_RESET_PROP_REG_w_enable [12] ) | (reg_SYS_RESET_PROP_REG_UART0_next & ~d2l_SYS_RESET_PROP_REG_w_enable [12] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_UART1_next = ((d2l_SYS_RESET_PROP_REG_w [13]  & d2l_SYS_RESET_PROP_REG_w_enable [13] ) | (reg_SYS_RESET_PROP_REG_UART1_next & ~d2l_SYS_RESET_PROP_REG_w_enable [13] ));
    if (d2l_SYS_RESET_PROP_REG_we) reg_SYS_RESET_PROP_REG_WDOG_next = ((d2l_SYS_RESET_PROP_REG_w [14]  & d2l_SYS_RESET_PROP_REG_w_enable [14] ) | (reg_SYS_RESET_PROP_REG_WDOG_next & ~d2l_SYS_RESET_PROP_REG_w_enable [14] ));
  end
  
  //------- reg assigns for SYS_RESET_PROP_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_SYS_RESET_PROP_REG_DMA0 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_DMA1 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_SRAMx <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_TLX_FWD <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_GGRA <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_NIC <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_TIMER0 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_TIMER1 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_UART0 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_UART1 <= #1 1'b1;
      rg_SYS_RESET_PROP_REG_WDOG <= #1 1'b1;
    end
    else begin
      rg_SYS_RESET_PROP_REG_DMA0 <= #1  reg_SYS_RESET_PROP_REG_DMA0_next;
      rg_SYS_RESET_PROP_REG_DMA1 <= #1  reg_SYS_RESET_PROP_REG_DMA1_next;
      rg_SYS_RESET_PROP_REG_SRAMx <= #1  reg_SYS_RESET_PROP_REG_SRAMx_next;
      rg_SYS_RESET_PROP_REG_TLX_FWD <= #1  reg_SYS_RESET_PROP_REG_TLX_FWD_next;
      rg_SYS_RESET_PROP_REG_GGRA <= #1  reg_SYS_RESET_PROP_REG_GGRA_next;
      rg_SYS_RESET_PROP_REG_NIC <= #1  reg_SYS_RESET_PROP_REG_NIC_next;
      rg_SYS_RESET_PROP_REG_TIMER0 <= #1  reg_SYS_RESET_PROP_REG_TIMER0_next;
      rg_SYS_RESET_PROP_REG_TIMER1 <= #1  reg_SYS_RESET_PROP_REG_TIMER1_next;
      rg_SYS_RESET_PROP_REG_UART0 <= #1  reg_SYS_RESET_PROP_REG_UART0_next;
      rg_SYS_RESET_PROP_REG_UART1 <= #1  reg_SYS_RESET_PROP_REG_UART1_next;
      rg_SYS_RESET_PROP_REG_WDOG <= #1  reg_SYS_RESET_PROP_REG_WDOG_next;
    end
  end
  
  //------- combinatorial assigns for TIMER0_CLK_SELECT_REG
  always @ (*) begin
    reg_TIMER0_CLK_SELECT_REG_SELECT_next = rg_TIMER0_CLK_SELECT_REG_SELECT;
    l2h_TIMER0_CLK_SELECT_REG_SELECT_r = rg_TIMER0_CLK_SELECT_REG_SELECT;
    if (d2l_TIMER0_CLK_SELECT_REG_we) reg_TIMER0_CLK_SELECT_REG_SELECT_next = ((d2l_TIMER0_CLK_SELECT_REG_w [2:0]  & d2l_TIMER0_CLK_SELECT_REG_w_enable [2:0] ) | (reg_TIMER0_CLK_SELECT_REG_SELECT_next & ~d2l_TIMER0_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for TIMER0_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_TIMER0_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_TIMER0_CLK_SELECT_REG_SELECT <= #1  reg_TIMER0_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for SYS_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_SYS_CLK_SELECT_REG_r = 32'b0;
    l2d_SYS_CLK_SELECT_REG_r [2:0]  = rg_SYS_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for DMA0_PCLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_DMA0_PCLK_SELECT_REG_r = 32'b0;
    l2d_DMA0_PCLK_SELECT_REG_r [2:0]  = rg_DMA0_PCLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for CLK_GATE_EN_REG
  always @ (*) begin
    reg_CLK_GATE_EN_REG_CPU_next = rg_CLK_GATE_EN_REG_CPU;
    l2h_CLK_GATE_EN_REG_CPU_r = rg_CLK_GATE_EN_REG_CPU;
    reg_CLK_GATE_EN_REG_DAP_next = rg_CLK_GATE_EN_REG_DAP;
    l2h_CLK_GATE_EN_REG_DAP_r = rg_CLK_GATE_EN_REG_DAP;
    reg_CLK_GATE_EN_REG_DMA0_next = rg_CLK_GATE_EN_REG_DMA0;
    l2h_CLK_GATE_EN_REG_DMA0_r = rg_CLK_GATE_EN_REG_DMA0;
    reg_CLK_GATE_EN_REG_DMA1_next = rg_CLK_GATE_EN_REG_DMA1;
    l2h_CLK_GATE_EN_REG_DMA1_r = rg_CLK_GATE_EN_REG_DMA1;
    reg_CLK_GATE_EN_REG_SRAMx_next = rg_CLK_GATE_EN_REG_SRAMx;
    l2h_CLK_GATE_EN_REG_SRAMx_r = rg_CLK_GATE_EN_REG_SRAMx;
    reg_CLK_GATE_EN_REG_TLX_FWD_next = rg_CLK_GATE_EN_REG_TLX_FWD;
    l2h_CLK_GATE_EN_REG_TLX_FWD_r = rg_CLK_GATE_EN_REG_TLX_FWD;
    reg_CLK_GATE_EN_REG_GGRA_next = rg_CLK_GATE_EN_REG_GGRA;
    l2h_CLK_GATE_EN_REG_GGRA_r = rg_CLK_GATE_EN_REG_GGRA;
    reg_CLK_GATE_EN_REG_NIC_next = rg_CLK_GATE_EN_REG_NIC;
    l2h_CLK_GATE_EN_REG_NIC_r = rg_CLK_GATE_EN_REG_NIC;
    reg_CLK_GATE_EN_REG_TIMER0_next = rg_CLK_GATE_EN_REG_TIMER0;
    l2h_CLK_GATE_EN_REG_TIMER0_r = rg_CLK_GATE_EN_REG_TIMER0;
    reg_CLK_GATE_EN_REG_TIMER1_next = rg_CLK_GATE_EN_REG_TIMER1;
    l2h_CLK_GATE_EN_REG_TIMER1_r = rg_CLK_GATE_EN_REG_TIMER1;
    reg_CLK_GATE_EN_REG_UART0_next = rg_CLK_GATE_EN_REG_UART0;
    l2h_CLK_GATE_EN_REG_UART0_r = rg_CLK_GATE_EN_REG_UART0;
    reg_CLK_GATE_EN_REG_UART1_next = rg_CLK_GATE_EN_REG_UART1;
    l2h_CLK_GATE_EN_REG_UART1_r = rg_CLK_GATE_EN_REG_UART1;
    reg_CLK_GATE_EN_REG_WDOG_next = rg_CLK_GATE_EN_REG_WDOG;
    l2h_CLK_GATE_EN_REG_WDOG_r = rg_CLK_GATE_EN_REG_WDOG;
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_CPU_next = ((d2l_CLK_GATE_EN_REG_w [1]  & d2l_CLK_GATE_EN_REG_w_enable [1] ) | (reg_CLK_GATE_EN_REG_CPU_next & ~d2l_CLK_GATE_EN_REG_w_enable [1] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_DAP_next = ((d2l_CLK_GATE_EN_REG_w [2]  & d2l_CLK_GATE_EN_REG_w_enable [2] ) | (reg_CLK_GATE_EN_REG_DAP_next & ~d2l_CLK_GATE_EN_REG_w_enable [2] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_DMA0_next = ((d2l_CLK_GATE_EN_REG_w [3]  & d2l_CLK_GATE_EN_REG_w_enable [3] ) | (reg_CLK_GATE_EN_REG_DMA0_next & ~d2l_CLK_GATE_EN_REG_w_enable [3] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_DMA1_next = ((d2l_CLK_GATE_EN_REG_w [4]  & d2l_CLK_GATE_EN_REG_w_enable [4] ) | (reg_CLK_GATE_EN_REG_DMA1_next & ~d2l_CLK_GATE_EN_REG_w_enable [4] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_SRAMx_next = ((d2l_CLK_GATE_EN_REG_w [5]  & d2l_CLK_GATE_EN_REG_w_enable [5] ) | (reg_CLK_GATE_EN_REG_SRAMx_next & ~d2l_CLK_GATE_EN_REG_w_enable [5] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_TLX_FWD_next = ((d2l_CLK_GATE_EN_REG_w [6]  & d2l_CLK_GATE_EN_REG_w_enable [6] ) | (reg_CLK_GATE_EN_REG_TLX_FWD_next & ~d2l_CLK_GATE_EN_REG_w_enable [6] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_GGRA_next = ((d2l_CLK_GATE_EN_REG_w [8]  & d2l_CLK_GATE_EN_REG_w_enable [8] ) | (reg_CLK_GATE_EN_REG_GGRA_next & ~d2l_CLK_GATE_EN_REG_w_enable [8] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_NIC_next = ((d2l_CLK_GATE_EN_REG_w [9]  & d2l_CLK_GATE_EN_REG_w_enable [9] ) | (reg_CLK_GATE_EN_REG_NIC_next & ~d2l_CLK_GATE_EN_REG_w_enable [9] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_TIMER0_next = ((d2l_CLK_GATE_EN_REG_w [10]  & d2l_CLK_GATE_EN_REG_w_enable [10] ) | (reg_CLK_GATE_EN_REG_TIMER0_next & ~d2l_CLK_GATE_EN_REG_w_enable [10] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_TIMER1_next = ((d2l_CLK_GATE_EN_REG_w [11]  & d2l_CLK_GATE_EN_REG_w_enable [11] ) | (reg_CLK_GATE_EN_REG_TIMER1_next & ~d2l_CLK_GATE_EN_REG_w_enable [11] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_UART0_next = ((d2l_CLK_GATE_EN_REG_w [12]  & d2l_CLK_GATE_EN_REG_w_enable [12] ) | (reg_CLK_GATE_EN_REG_UART0_next & ~d2l_CLK_GATE_EN_REG_w_enable [12] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_UART1_next = ((d2l_CLK_GATE_EN_REG_w [13]  & d2l_CLK_GATE_EN_REG_w_enable [13] ) | (reg_CLK_GATE_EN_REG_UART1_next & ~d2l_CLK_GATE_EN_REG_w_enable [13] ));
    if (d2l_CLK_GATE_EN_REG_we) reg_CLK_GATE_EN_REG_WDOG_next = ((d2l_CLK_GATE_EN_REG_w [14]  & d2l_CLK_GATE_EN_REG_w_enable [14] ) | (reg_CLK_GATE_EN_REG_WDOG_next & ~d2l_CLK_GATE_EN_REG_w_enable [14] ));
  end
  
  //------- reg assigns for CLK_GATE_EN_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_CLK_GATE_EN_REG_CPU <= #1 1'b1;
      rg_CLK_GATE_EN_REG_DAP <= #1 1'b1;
      rg_CLK_GATE_EN_REG_DMA0 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_DMA1 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_SRAMx <= #1 1'b1;
      rg_CLK_GATE_EN_REG_TLX_FWD <= #1 1'b1;
      rg_CLK_GATE_EN_REG_GGRA <= #1 1'b1;
      rg_CLK_GATE_EN_REG_NIC <= #1 1'b1;
      rg_CLK_GATE_EN_REG_TIMER0 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_TIMER1 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_UART0 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_UART1 <= #1 1'b1;
      rg_CLK_GATE_EN_REG_WDOG <= #1 1'b1;
    end
    else begin
      rg_CLK_GATE_EN_REG_CPU <= #1  reg_CLK_GATE_EN_REG_CPU_next;
      rg_CLK_GATE_EN_REG_DAP <= #1  reg_CLK_GATE_EN_REG_DAP_next;
      rg_CLK_GATE_EN_REG_DMA0 <= #1  reg_CLK_GATE_EN_REG_DMA0_next;
      rg_CLK_GATE_EN_REG_DMA1 <= #1  reg_CLK_GATE_EN_REG_DMA1_next;
      rg_CLK_GATE_EN_REG_SRAMx <= #1  reg_CLK_GATE_EN_REG_SRAMx_next;
      rg_CLK_GATE_EN_REG_TLX_FWD <= #1  reg_CLK_GATE_EN_REG_TLX_FWD_next;
      rg_CLK_GATE_EN_REG_GGRA <= #1  reg_CLK_GATE_EN_REG_GGRA_next;
      rg_CLK_GATE_EN_REG_NIC <= #1  reg_CLK_GATE_EN_REG_NIC_next;
      rg_CLK_GATE_EN_REG_TIMER0 <= #1  reg_CLK_GATE_EN_REG_TIMER0_next;
      rg_CLK_GATE_EN_REG_TIMER1 <= #1  reg_CLK_GATE_EN_REG_TIMER1_next;
      rg_CLK_GATE_EN_REG_UART0 <= #1  reg_CLK_GATE_EN_REG_UART0_next;
      rg_CLK_GATE_EN_REG_UART1 <= #1  reg_CLK_GATE_EN_REG_UART1_next;
      rg_CLK_GATE_EN_REG_WDOG <= #1  reg_CLK_GATE_EN_REG_WDOG_next;
    end
  end
  
  //------- combinatorial assigns for RESET_REQ_REG (pio read data)
  always @ (*) begin
    l2d_RESET_REQ_REG_r = 32'b0;
    l2d_RESET_REQ_REG_r [3]  = rg_RESET_REQ_REG_DMA0;
    l2d_RESET_REQ_REG_r [4]  = rg_RESET_REQ_REG_DMA1;
    l2d_RESET_REQ_REG_r [6]  = rg_RESET_REQ_REG_TLX_FWD;
    l2d_RESET_REQ_REG_r [7]  = rg_RESET_REQ_REG_TLX_REV;
    l2d_RESET_REQ_REG_r [8]  = rg_RESET_REQ_REG_GGRA;
    l2d_RESET_REQ_REG_r [9]  = rg_RESET_REQ_REG_NIC;
    l2d_RESET_REQ_REG_r [10]  = rg_RESET_REQ_REG_TIMER0;
    l2d_RESET_REQ_REG_r [11]  = rg_RESET_REQ_REG_TIMER1;
    l2d_RESET_REQ_REG_r [12]  = rg_RESET_REQ_REG_UART0;
    l2d_RESET_REQ_REG_r [13]  = rg_RESET_REQ_REG_UART1;
    l2d_RESET_REQ_REG_r [14]  = rg_RESET_REQ_REG_WDOG;
  end
  
  //------- combinatorial assigns for RESET_ACK_REG
  always @ (*) begin
    rg_RESET_ACK_REG_DMA0 =  h2l_RESET_ACK_REG_DMA0_w;
    rg_RESET_ACK_REG_DMA1 =  h2l_RESET_ACK_REG_DMA1_w;
    rg_RESET_ACK_REG_TLX_FWD =  h2l_RESET_ACK_REG_TLX_FWD_w;
    rg_RESET_ACK_REG_TLX_REV =  h2l_RESET_ACK_REG_TLX_REV_w;
    rg_RESET_ACK_REG_GGRA =  h2l_RESET_ACK_REG_GGRA_w;
    rg_RESET_ACK_REG_NIC =  h2l_RESET_ACK_REG_NIC_w;
    rg_RESET_ACK_REG_TIMER0 =  h2l_RESET_ACK_REG_TIMER0_w;
    rg_RESET_ACK_REG_TIMER1 =  h2l_RESET_ACK_REG_TIMER1_w;
    rg_RESET_ACK_REG_UART0 =  h2l_RESET_ACK_REG_UART0_w;
    rg_RESET_ACK_REG_UART1 =  h2l_RESET_ACK_REG_UART1_w;
    rg_RESET_ACK_REG_WDOG =  h2l_RESET_ACK_REG_WDOG_w;
  end
  
  //------- combinatorial assigns for UART0_CLK_SELECT_REG
  always @ (*) begin
    reg_UART0_CLK_SELECT_REG_SELECT_next = rg_UART0_CLK_SELECT_REG_SELECT;
    l2h_UART0_CLK_SELECT_REG_SELECT_r = rg_UART0_CLK_SELECT_REG_SELECT;
    if (d2l_UART0_CLK_SELECT_REG_we) reg_UART0_CLK_SELECT_REG_SELECT_next = ((d2l_UART0_CLK_SELECT_REG_w [2:0]  & d2l_UART0_CLK_SELECT_REG_w_enable [2:0] ) | (reg_UART0_CLK_SELECT_REG_SELECT_next & ~d2l_UART0_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for UART0_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_UART0_CLK_SELECT_REG_SELECT <= #1 3'b1;
    end
    else begin
      rg_UART0_CLK_SELECT_REG_SELECT <= #1  reg_UART0_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for CGRA_CLK_SELECT_REG
  always @ (*) begin
    reg_CGRA_CLK_SELECT_REG_SELECT_next = rg_CGRA_CLK_SELECT_REG_SELECT;
    l2h_CGRA_CLK_SELECT_REG_SELECT_r = rg_CGRA_CLK_SELECT_REG_SELECT;
    if (d2l_CGRA_CLK_SELECT_REG_we) reg_CGRA_CLK_SELECT_REG_SELECT_next = ((d2l_CGRA_CLK_SELECT_REG_w [2:0]  & d2l_CGRA_CLK_SELECT_REG_w_enable [2:0] ) | (reg_CGRA_CLK_SELECT_REG_SELECT_next & ~d2l_CGRA_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for CGRA_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_CGRA_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_CGRA_CLK_SELECT_REG_SELECT <= #1  reg_CGRA_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for ID_REG (pio read data)
  always @ (*) begin
    l2d_ID_REG_r = rg_ID_REG_ID_VALUE;
  end
  
  //------- combinatorial assigns for TLX_FWD_CLK_SELECT_REG
  always @ (*) begin
    reg_TLX_FWD_CLK_SELECT_REG_SELECT_next = rg_TLX_FWD_CLK_SELECT_REG_SELECT;
    l2h_TLX_FWD_CLK_SELECT_REG_SELECT_r = rg_TLX_FWD_CLK_SELECT_REG_SELECT;
    if (d2l_TLX_FWD_CLK_SELECT_REG_we) reg_TLX_FWD_CLK_SELECT_REG_SELECT_next = ((d2l_TLX_FWD_CLK_SELECT_REG_w [2:0]  & d2l_TLX_FWD_CLK_SELECT_REG_w_enable [2:0] ) | (reg_TLX_FWD_CLK_SELECT_REG_SELECT_next & ~d2l_TLX_FWD_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for TLX_FWD_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_TLX_FWD_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_TLX_FWD_CLK_SELECT_REG_SELECT <= #1  reg_TLX_FWD_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for SYS_RESET_PROP_REG (pio read data)
  always @ (*) begin
    l2d_SYS_RESET_PROP_REG_r = 32'b0;
    l2d_SYS_RESET_PROP_REG_r [3]  = rg_SYS_RESET_PROP_REG_DMA0;
    l2d_SYS_RESET_PROP_REG_r [4]  = rg_SYS_RESET_PROP_REG_DMA1;
    l2d_SYS_RESET_PROP_REG_r [5]  = rg_SYS_RESET_PROP_REG_SRAMx;
    l2d_SYS_RESET_PROP_REG_r [6]  = rg_SYS_RESET_PROP_REG_TLX_FWD;
    l2d_SYS_RESET_PROP_REG_r [8]  = rg_SYS_RESET_PROP_REG_GGRA;
    l2d_SYS_RESET_PROP_REG_r [9]  = rg_SYS_RESET_PROP_REG_NIC;
    l2d_SYS_RESET_PROP_REG_r [10]  = rg_SYS_RESET_PROP_REG_TIMER0;
    l2d_SYS_RESET_PROP_REG_r [11]  = rg_SYS_RESET_PROP_REG_TIMER1;
    l2d_SYS_RESET_PROP_REG_r [12]  = rg_SYS_RESET_PROP_REG_UART0;
    l2d_SYS_RESET_PROP_REG_r [13]  = rg_SYS_RESET_PROP_REG_UART1;
    l2d_SYS_RESET_PROP_REG_r [14]  = rg_SYS_RESET_PROP_REG_WDOG;
  end
  
  //------- combinatorial assigns for SYS_TICK_CONFIG_REG
  always @ (*) begin
    reg_SYS_TICK_CONFIG_REG_CALIB_next = rg_SYS_TICK_CONFIG_REG_CALIB;
    l2h_SYS_TICK_CONFIG_REG_CALIB_r = rg_SYS_TICK_CONFIG_REG_CALIB;
    reg_SYS_TICK_CONFIG_REG_NOT_10_MS_next = rg_SYS_TICK_CONFIG_REG_NOT_10_MS;
    l2h_SYS_TICK_CONFIG_REG_NOT_10_MS_r = rg_SYS_TICK_CONFIG_REG_NOT_10_MS;
    if (d2l_SYS_TICK_CONFIG_REG_we) reg_SYS_TICK_CONFIG_REG_CALIB_next = ((d2l_SYS_TICK_CONFIG_REG_w [23:0]  & d2l_SYS_TICK_CONFIG_REG_w_enable [23:0] ) | (reg_SYS_TICK_CONFIG_REG_CALIB_next & ~d2l_SYS_TICK_CONFIG_REG_w_enable [23:0] ));
    if (d2l_SYS_TICK_CONFIG_REG_we) reg_SYS_TICK_CONFIG_REG_NOT_10_MS_next = ((d2l_SYS_TICK_CONFIG_REG_w [31]  & d2l_SYS_TICK_CONFIG_REG_w_enable [31] ) | (reg_SYS_TICK_CONFIG_REG_NOT_10_MS_next & ~d2l_SYS_TICK_CONFIG_REG_w_enable [31] ));
  end
  
  //------- reg assigns for SYS_TICK_CONFIG_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_SYS_TICK_CONFIG_REG_CALIB <= #1 24'h0;
      rg_SYS_TICK_CONFIG_REG_NOT_10_MS <= #1 1'b1;
    end
    else begin
      rg_SYS_TICK_CONFIG_REG_CALIB <= #1  reg_SYS_TICK_CONFIG_REG_CALIB_next;
      rg_SYS_TICK_CONFIG_REG_NOT_10_MS <= #1  reg_SYS_TICK_CONFIG_REG_NOT_10_MS_next;
    end
  end
  
  //------- combinatorial assigns for SYS_RESET_AGGR_REG
  always @ (*) begin
    reg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_next = rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN;
    l2h_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_r = rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN;
    reg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_next = rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN;
    l2h_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_r = rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN;
    if (d2l_SYS_RESET_AGGR_REG_we) reg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_next = ((d2l_SYS_RESET_AGGR_REG_w [0]  & d2l_SYS_RESET_AGGR_REG_w_enable [0] ) | (reg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_next & ~d2l_SYS_RESET_AGGR_REG_w_enable [0] ));
    if (d2l_SYS_RESET_AGGR_REG_we) reg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_next = ((d2l_SYS_RESET_AGGR_REG_w [1]  & d2l_SYS_RESET_AGGR_REG_w_enable [1] ) | (reg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_next & ~d2l_SYS_RESET_AGGR_REG_w_enable [1] ));
  end
  
  //------- reg assigns for SYS_RESET_AGGR_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN <= #1 1'b0;
      rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN <= #1 1'b0;
    end
    else begin
      rg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN <= #1  reg_SYS_RESET_AGGR_REG_LOCKUP_RESET_EN_next;
      rg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN <= #1  reg_SYS_RESET_AGGR_REG_WDOG_TIMEOUT_RESET_EN_next;
    end
  end
  
  //------- combinatorial assigns for WDOG_CLK_SELECT_REG
  always @ (*) begin
    reg_WDOG_CLK_SELECT_REG_SELECT_next = rg_WDOG_CLK_SELECT_REG_SELECT;
    l2h_WDOG_CLK_SELECT_REG_SELECT_r = rg_WDOG_CLK_SELECT_REG_SELECT;
    if (d2l_WDOG_CLK_SELECT_REG_we) reg_WDOG_CLK_SELECT_REG_SELECT_next = ((d2l_WDOG_CLK_SELECT_REG_w [2:0]  & d2l_WDOG_CLK_SELECT_REG_w_enable [2:0] ) | (reg_WDOG_CLK_SELECT_REG_SELECT_next & ~d2l_WDOG_CLK_SELECT_REG_w_enable [2:0] ));
  end
  
  //------- reg assigns for WDOG_CLK_SELECT_REG
  always @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_WDOG_CLK_SELECT_REG_SELECT <= #1 3'b101;
    end
    else begin
      rg_WDOG_CLK_SELECT_REG_SELECT <= #1  reg_WDOG_CLK_SELECT_REG_SELECT_next;
    end
  end
  
  //------- combinatorial assigns for CGRA_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_CGRA_CLK_SELECT_REG_r = 32'b0;
    l2d_CGRA_CLK_SELECT_REG_r [2:0]  = rg_CGRA_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for UART1_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_UART1_CLK_SELECT_REG_r = 32'b0;
    l2d_UART1_CLK_SELECT_REG_r [2:0]  = rg_UART1_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for TIMER0_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_TIMER0_CLK_SELECT_REG_r = 32'b0;
    l2d_TIMER0_CLK_SELECT_REG_r [2:0]  = rg_TIMER0_CLK_SELECT_REG_SELECT;
  end
  
  //------- combinatorial assigns for TLX_FWD_CLK_SELECT_REG (pio read data)
  always @ (*) begin
    l2d_TLX_FWD_CLK_SELECT_REG_r = 32'b0;
    l2d_TLX_FWD_CLK_SELECT_REG_r [2:0]  = rg_TLX_FWD_CLK_SELECT_REG_SELECT;
  end
  
endmodule

